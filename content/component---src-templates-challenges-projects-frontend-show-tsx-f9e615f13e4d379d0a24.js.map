{"version":3,"file":"component---src-templates-challenges-projects-frontend-show-tsx-f9e615f13e4d379d0a24.js","mappings":"6JAWA,SAASA,EAAqBC,GAC5B,OACE,uBACEC,UAAS,0BACPD,EAAUE,MAAQ,IAAMF,EAAUE,MAAQ,KAG3CF,EAAUG,aAAe,gBAAC,IAAc,CAACC,KAAMJ,EAAUG,cACzDH,EAAUK,cACT,gCACE,2BACA,gBAAC,IAAc,CAACD,KAAMJ,EAAUK,gBAGpC,2BAGN,CAEAN,EAAqBO,YAAc,uBAEnC,K,qVCFMC,GAAkBC,EAAAA,EAAAA,IACtBC,EAAAA,IACA,SAACC,GAA6B,MAAM,CAClCA,qBAAAA,EACD,IA6BGC,EAAO,YAIX,WAAYC,GAAsB,IAAD,EAEkB,OADjD,cAAMA,IAAM,MAHNC,WAAiC,KAIvC,EAAKC,aAAe,EAAKA,aAAaC,KAAK,QAAM,CACnD,CAPW,SAOV,kBA4IA,OA5IA,EACDC,kBAAA,WAAqB,IAAD,EAClB,EASIC,KAAKL,MARPM,EAAgB,EAAhBA,iBAAiB,EAAD,EAChBC,KACEC,cACEpB,UAAaqB,EAAK,EAALA,MAAOC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAGxBC,EAAa,EAA5BC,YAAeD,eAGjBE,EAFqB,EAAnBA,qBAEkB,OAAD,UACdF,EAAc,CACjBH,MAAAA,EACAC,cAAAA,EACAC,aAAAA,KAEFL,EAAiBM,EAAcG,IAChB,QAAf,EAAAV,KAAKJ,kBAAU,OAAf,EAAiBe,OACnB,EAAC,EAEDC,mBAAA,SAAmBC,GACjB,IAG0BC,EAGtBD,EALFX,KACEC,cACEpB,UAAaqB,MAInB,EASIJ,KAAKL,MARPM,EAAgB,EAAhBA,iBAAiB,EAAD,EAChBC,KACEC,cACEpB,UAAoBgC,EAAY,EAAnBX,MAAqBC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAGtCC,EAAa,EAA5BC,YAAeD,cACfE,EAAmB,EAAnBA,oBAEEK,IAAcC,IAChBN,EAAoB,OAAD,UACdF,EAAc,CACjBH,MAAOW,EACPV,cAAAA,EACAC,aAAAA,KAEFL,EAAiBM,EAAcG,IAEnC,EAAC,EAEDb,aAAA,YACqB,EAAnBmB,qBAKEhB,KAAKL,MAAMsB,qBAEf,EAAC,EAEDC,OAAA,WAAU,IAAD,OACP,EAuBIlB,KAAKL,MAAK,IAtBZO,KACEC,cACEpB,UACEsB,EAAa,EAAbA,cACUc,EAAS,EAAnBC,OAAUD,UACVE,EAAY,EAAZA,aACAjB,EAAK,EAALA,MACAlB,EAAW,EAAXA,YACAE,EAAY,EAAZA,aACAkC,EAAU,EAAVA,WACAC,EAAa,EAAbA,cACAtC,EAAK,EAALA,MACAuC,EAAkB,EAAlBA,mBAIN/B,EAAoB,EAApBA,qBAAqB,EAAD,EACpBe,YACED,cAAiBkB,EAAiB,EAAjBA,kBAAmBC,EAAiB,EAAjBA,kBAEtCC,EAAC,EAADA,EACAC,EAAwB,EAAxBA,yBAGIC,EAAoBF,EAAE,SACjBL,EAAU,WAAWrC,EAAK,UACpC,MAAMmB,EAEP,OACE,gBAAC,IAAO,CACN0B,SAAU,SAACC,GAAqB,OAAM,EAAKnC,WAAamC,CAAC,EACzDN,kBAAmBA,EACnBC,kBAAmBA,GAEnB,gBAAC,IAAW,KACV,gBAAC,IAAM,CACLtB,MAAUyB,EAAc,MAAMF,EAAE,eAAc,wBAEhD,gBAAC,IAAI,KACH,gBAAC,IAAG,KACF,gBAAC,IAAG,CAACK,GAAI,EAAGC,SAAU,EAAGC,GAAI,GAAIC,SAAU,EAAGC,GAAI,IAChD,gBAAC,IAAM,MACP,gBAAC,IAAc,CACbC,YAAa5C,EACb+B,mBAAoBA,GAEnBpB,GAEH,gBAAC,IAAoB,CACnBlB,YAAaA,EACbE,aAAcA,IAEhB,gBAAC,IAAY,CACXiB,cAAeA,EACfnB,YAAaA,EAEboD,SAAUtC,KAAKH,aACf0C,mBAAoBX,IAEtB,gBAAC,IAAgB,CACfY,UAAUC,EAAAA,EAAAA,IAAY,CAAEpB,aAAAA,EAAcjB,MAAAA,MAExC,2BACA,gBAAC,IAAM,OAET,gBAAC,IAAe,CACdnB,MAAOA,EACPkC,UAAWA,EACXI,cAAeA,EACfD,WAAYA,IAEd,gBAAC,IAAS,CAACoB,eAAgBtC,EAAOuC,eAAgBxB,OAM9D,EAAC,EAnJU,CAASyB,EAAAA,WAsJtBlD,EAAQL,YAAc,UAEtB,WAAewD,EAAAA,EAAAA,IACbvD,GAnLyB,SAACwD,GAAkB,OAC5CC,EAAAA,EAAAA,IACE,CACEtC,oBAAAA,EAAAA,GACAR,iBAAAA,EAAAA,GACA2B,yBAAAA,EAAAA,GACAX,oBAAqB,kBAAM+B,EAAAA,EAAAA,IAAU,aAAa,GAEpDF,EACA,GAyKJ,EAGEG,EAAAA,EAAAA,IAAAA,CAAkBvD,G","sources":["webpack://@freecodecamp/client/./src/templates/Challenges/components/Challenge-Description.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/projects/frontend/Show.tsx"],"sourcesContent":["import React from 'react';\n\nimport PrismFormatted from './prism-formatted';\nimport './challenge-description.css';\n\ntype Challenge = {\n  block?: string;\n  description?: string;\n  instructions?: string;\n};\n\nfunction ChallengeDescription(challenge: Challenge): JSX.Element {\n  return (\n    <div\n      className={`challenge-instructions${\n        challenge.block ? ' ' + challenge.block : ''\n      }`}\n    >\n      {challenge.description && <PrismFormatted text={challenge.description} />}\n      {challenge.instructions && (\n        <>\n          <hr />\n          <PrismFormatted text={challenge.instructions} />\n        </>\n      )}\n      <hr />\n    </div>\n  );\n}\n\nChallengeDescription.displayName = 'ChallengeDescription';\n\nexport default ChallengeDescription;\n","import { Grid, Col, Row } from '@freecodecamp/react-bootstrap';\nimport { graphql } from 'gatsby';\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport { TFunction, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\nimport Spacer from '../../../../components/helpers/spacer';\nimport LearnLayout from '../../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta } from '../../../../redux/prop-types';\nimport ChallengeDescription from '../../components/Challenge-Description';\nimport Hotkeys from '../../components/Hotkeys';\nimport ChallengeTitle from '../../components/challenge-title';\nimport CompletionModal from '../../components/completion-modal';\nimport HelpModal from '../../components/help-modal';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues\n} from '../../redux/actions';\nimport { isChallengeCompletedSelector } from '../../redux/selectors';\nimport { getGuideUrl } from '../../utils';\nimport SolutionForm from '../solution-form';\nimport ProjectToolPanel from '../tool-panel';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  (isChallengeCompleted: boolean) => ({\n    isChallengeCompleted\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion')\n    },\n    dispatch\n  );\n\n// Types\ninterface ProjectProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  isChallengeCompleted: boolean;\n  openCompletionModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}\n\n// Component\nclass Project extends Component<ProjectProps> {\n  static displayName: string;\n  private _container: HTMLElement | null = null;\n\n  constructor(props: ProjectProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { title, challengeType, helpCategory }\n        }\n      },\n      pageContext: { challengeMeta },\n      updateChallengeMeta\n    } = this.props;\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n    this._container?.focus();\n  }\n\n  componentDidUpdate(prevProps: ProjectProps): void {\n    const {\n      data: {\n        challengeNode: {\n          challenge: { title: prevTitle }\n        }\n      }\n    } = prevProps;\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { title: currentTitle, challengeType, helpCategory }\n        }\n      },\n      pageContext: { challengeMeta },\n      updateChallengeMeta\n    } = this.props;\n    if (prevTitle !== currentTitle) {\n      updateChallengeMeta({\n        ...challengeMeta,\n        title: currentTitle,\n        challengeType,\n        helpCategory\n      });\n      challengeMounted(challengeMeta.id);\n    }\n  }\n\n  handleSubmit({\n    showCompletionModal\n  }: {\n    showCompletionModal: boolean;\n  }): void {\n    if (showCompletionModal) {\n      this.props.openCompletionModal();\n    }\n  }\n\n  render() {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            challengeType,\n            fields: { blockName },\n            forumTopicId,\n            title,\n            description,\n            instructions,\n            superBlock,\n            certification,\n            block,\n            translationPending\n          }\n        }\n      },\n      isChallengeCompleted,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      t,\n      updateSolutionFormValues\n    } = this.props;\n\n    const blockNameTitle = `${t(\n      `intro:${superBlock}.blocks.${block}.title`\n    )} - ${title}`;\n\n    return (\n      <Hotkeys\n        innerRef={(c: HTMLElement | null) => (this._container = c)}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n      >\n        <LearnLayout>\n          <Helmet\n            title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n          />\n          <Grid>\n            <Row>\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <Spacer />\n                <ChallengeTitle\n                  isCompleted={isChallengeCompleted}\n                  translationPending={translationPending}\n                >\n                  {title}\n                </ChallengeTitle>\n                <ChallengeDescription\n                  description={description}\n                  instructions={instructions}\n                />\n                <SolutionForm\n                  challengeType={challengeType}\n                  description={description}\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  onSubmit={this.handleSubmit}\n                  updateSolutionForm={updateSolutionFormValues}\n                />\n                <ProjectToolPanel\n                  guideUrl={getGuideUrl({ forumTopicId, title })}\n                />\n                <br />\n                <Spacer />\n              </Col>\n              <CompletionModal\n                block={block}\n                blockName={blockName}\n                certification={certification}\n                superBlock={superBlock}\n              />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Grid>\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nProject.displayName = 'Project';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(Project));\n\nexport const query = graphql`\n  query ProjectChallenge($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        forumTopicId\n        title\n        description\n        instructions\n        challengeType\n        helpCategory\n        superBlock\n        certification\n        block\n        translationPending\n        fields {\n          blockName\n          slug\n        }\n      }\n    }\n  }\n`;\n"],"names":["ChallengeDescription","challenge","className","block","description","text","instructions","displayName","mapStateToProps","createSelector","isChallengeCompletedSelector","isChallengeCompleted","Project","props","_container","handleSubmit","bind","componentDidMount","this","challengeMounted","data","challengeNode","title","challengeType","helpCategory","challengeMeta","pageContext","updateChallengeMeta","id","focus","componentDidUpdate","prevProps","prevTitle","currentTitle","showCompletionModal","openCompletionModal","render","blockName","fields","forumTopicId","superBlock","certification","translationPending","nextChallengePath","prevChallengePath","t","updateSolutionFormValues","blockNameTitle","innerRef","c","md","mdOffset","sm","smOffset","xs","isCompleted","onSubmit","updateSolutionForm","guideUrl","getGuideUrl","challengeTitle","challengeBlock","Component","connect","dispatch","bindActionCreators","openModal","withTranslation"],"sourceRoot":""}