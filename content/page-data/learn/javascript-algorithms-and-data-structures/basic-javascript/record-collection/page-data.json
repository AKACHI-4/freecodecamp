{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/record-collection",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Record Collection","description":"<section id=\"description\">\n<p>You are given an object literal representing a part of your musical album collection. Each album has a unique id number as its key and several other properties. Not all albums have complete information.</p>\n<p>You start with an <code>updateRecords</code> function that takes an object literal, <code>records</code>, containing the musical album collection, an <code>id</code>, a <code>prop</code> (like <code>artist</code> or <code>tracks</code>), and a <code>value</code>. Complete the function using the rules below to modify the object passed to the function.</p>\n<ul>\n<li>Your function must always return the entire record collection object.</li>\n<li>If <code>prop</code> isn't <code>tracks</code> and <code>value</code> isn't an empty string, update or set that album's <code>prop</code> to <code>value</code>.</li>\n<li>If <code>prop</code> is <code>tracks</code> but the album doesn't have a <code>tracks</code> property, create an empty array and add <code>value</code> to it.</li>\n<li>If <code>prop</code> is <code>tracks</code> and <code>value</code> isn't an empty string, add <code>value</code> to the end of the album's existing <code>tracks</code> array.</li>\n<li>If <code>value</code> is an empty string, delete the given <code>prop</code> property from the album.</li>\n</ul>\n<p><strong>Note:</strong> A copy of the <code>recordCollection</code> object is used for the tests.</p>\n</section>","id":"56533eb9ac21ba0edf2244cf","hasEditableBoundaries":false,"instructions":null,"notes":null,"removeComments":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","certification":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18261,"fields":{"blockName":"Basic JavaScript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/record-collection","tests":[{"text":"<p>After <code>updateRecords(recordCollection, 5439, \"artist\", \"ABBA\")</code>, <code>artist</code> should be the string <code>ABBA</code></p>","testString":"assert(\n  updateRecords(_recordCollection, 5439, 'artist', 'ABBA')[5439]['artist'] ===\n    'ABBA'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 5439, \"tracks\", \"Take a Chance on Me\")</code>, <code>tracks</code> should have the string <code>Take a Chance on Me</code> as the last and only element.</p>","testString":"assert(\n  updateRecords(_recordCollection, 5439, 'tracks', 'Take a Chance on Me') &&\n  _recordCollection[5439]['tracks'].length === 1 &&\n  _recordCollection[5439]['tracks'].pop() === 'Take a Chance on Me'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 2548, \"artist\", \"\")</code>, <code>artist</code> should not be set</p>","testString":"updateRecords(_recordCollection, 2548, 'artist', '');\nassert(!_recordCollection[2548].hasOwnProperty('artist'));"},{"text":"<p>After <code>updateRecords(recordCollection, 1245, \"tracks\", \"Addicted to Love\")</code>, <code>tracks</code> should have the string <code>Addicted to Love</code> as the last element.</p>","testString":"assert(\n  updateRecords(_recordCollection, 1245, 'tracks', 'Addicted to Love')[1245][\n    'tracks'\n  ].pop() === 'Addicted to Love'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 2468, \"tracks\", \"Free\")</code>, <code>tracks</code> should have the string <code>1999</code> as the first element.</p>","testString":"assert(\n  updateRecords(_recordCollection, 2468, 'tracks', 'Free')[2468][\n    'tracks'\n  ][0] === '1999'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 2548, \"tracks\", \"\")</code>, <code>tracks</code> should not be set</p>","testString":"updateRecords(_recordCollection, 2548, 'tracks', '');\nassert(!_recordCollection[2548].hasOwnProperty('tracks'));"},{"text":"<p>After <code>updateRecords(recordCollection, 1245, \"albumTitle\", \"Riptide\")</code>, <code>albumTitle</code> should be the string <code>Riptide</code></p>","testString":"assert(\n  updateRecords(_recordCollection, 1245, 'albumTitle', 'Riptide')[1245][\n    'albumTitle'\n  ] === 'Riptide'\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Setup\nconst recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(records, id, prop, value) {\n  return records;\n}\n\nupdateRecords(recordCollection, 5439, 'artist', 'ABBA');","head":"const _recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","template":"","required":[],"nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-while-loops","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays","id":"56533eb9ac21ba0edf2244cf"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/record-collection"}},
    "staticQueryHashes": ["1368483026","3216307819"]}