{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/global-vs--local-scope-in-functions",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Global vs. Local Scope in Functions","description":"<section id=\"description\">\n<p>It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the local variable takes precedence over the global variable.</p>\n<p>In this example:</p>\n<pre><code class=\"language-js\">const someVar = \"Hat\";\n\nfunction myFun() {\n  const someVar = \"Head\";\n  return someVar;\n}\n</code></pre>\n<p>The function <code>myFun</code> will return the string <code>Head</code> because the local version of the variable is present.</p>\n</section>","id":"56533eb9ac21ba0edf2244c0","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Add a local variable to <code>myOutfit</code> function to override the value of <code>outerWear</code> with the string <code>sweater</code>.</p>\n</section>","notes":null,"removeComments":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/c2QwKH2","superBlock":"javascript-algorithms-and-data-structures","certification":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18194,"fields":{"blockName":"Basic JavaScript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/global-vs--local-scope-in-functions","tests":[{"text":"<p>You should not change the value of the global <code>outerWear</code>.</p>","testString":"assert(outerWear === 'T-Shirt');"},{"text":"<p><code>myOutfit</code> should return the string <code>sweater</code>.</p>","testString":"assert(myOutfit() === 'sweater');"},{"text":"<p>You should not change the return statement.</p>","testString":"assert(/return outerWear/.test(code));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Setup\nconst outerWear = \"T-Shirt\";\n\nfunction myOutfit() {\n  // Only change code below this line\n\n  // Only change code above this line\n  return outerWear;\n}\n\nmyOutfit();","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","template":"","required":[],"nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-undefined-value-returned-from-a-function","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/local-scope-and-functions","id":"56533eb9ac21ba0edf2244c0"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/global-vs--local-scope-in-functions"}},
    "staticQueryHashes": ["1368483026","3216307819"]}