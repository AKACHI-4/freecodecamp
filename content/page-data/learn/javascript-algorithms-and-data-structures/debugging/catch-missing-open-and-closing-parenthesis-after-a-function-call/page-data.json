{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/debugging/catch-missing-open-and-closing-parenthesis-after-a-function-call",
    "result": {"data":{"challengeNode":{"challenge":{"block":"debugging","title":"Catch Missing Open and Closing Parenthesis After a Function Call","description":"<section id=\"description\">\n<p>When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.</p>\n<p>The variables in the following example are different:</p>\n<pre><code class=\"language-js\">function myFunction() {\n  return \"You rock!\";\n}\nlet varOne = myFunction;\nlet varTwo = myFunction();\n</code></pre>\n<p>Here <code>varOne</code> is the function <code>myFunction</code>, and <code>varTwo</code> is the string <code>You rock!</code>.</p>\n</section>","id":"587d7b85367417b2b2512b39","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fix the code so the variable <code>result</code> is set to the value returned from calling the function <code>getNine</code>.</p>\n</section>","notes":null,"removeComments":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","certification":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301185,"fields":{"blockName":"Debugging","slug":"/learn/javascript-algorithms-and-data-structures/debugging/catch-missing-open-and-closing-parenthesis-after-a-function-call","tests":[{"text":"<p>Your code should fix the variable <code>result</code> so it is set to the number that the function <code>getNine</code> returns.</p>","testString":"assert(result == 9);"},{"text":"<p>Your code should call the <code>getNine</code> function.</p>","testString":"assert(code.match(/getNine\\(\\)/g).length == 2);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\n\nlet result = getNine;\nconsole.log(result);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","block":"debugging","template":"","required":[],"nextChallengePath":"/learn/javascript-algorithms-and-data-structures/debugging/catch-arguments-passed-in-the-wrong-order-when-calling-a-function","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator","id":"587d7b85367417b2b2512b39"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function myFunc() {\n for (let i = 1; i <= 4; i += 2) {\n   console.log(\"Still going!\");\n }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/debugging/catch-missing-open-and-closing-parenthesis-after-a-function-call"}},
    "staticQueryHashes": ["1368483026","3216307819"]}