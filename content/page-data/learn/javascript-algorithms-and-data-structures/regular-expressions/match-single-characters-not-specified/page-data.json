{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-characters-not-specified",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Match Single Characters Not Specified","description":"<section id=\"description\">\n<p>So far, you have created a set of characters that you want to match, but you could also create a set of characters that you do not want to match. These types of character sets are called <dfn>negated character sets</dfn>.</p>\n<p>To create a negated character set, you place a caret character (<code>^</code>) after the opening bracket and before the characters you do not want to match.</p>\n<p>For example, <code>/[^aeiou]/gi</code> matches all characters that are not a vowel. Note that characters like <code>.</code>, <code>!</code>, <code>[</code>, <code>@</code>, <code>/</code> and white space are matched - the negated vowel character set only excludes the vowel characters.</p>\n</section>","id":"587d7db6367417b2b2512b98","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create a single regex that matches all characters that are not a number or a vowel. Remember to include the appropriate flags in the regex.</p>\n</section>","notes":null,"removeComments":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","certification":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301358,"fields":{"blockName":"Regular Expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-characters-not-specified","tests":[{"text":"<p>Your regex <code>myRegex</code> should match 9 items.</p>","testString":"assert(result.length == 9);"},{"text":"<p>Your regex <code>myRegex</code> should use the global flag.</p>","testString":"assert(myRegex.flags.match(/g/).length == 1);"},{"text":"<p>Your regex <code>myRegex</code> should use the case insensitive flag.</p>","testString":"assert(myRegex.flags.match(/i/).length == 1);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let quoteSample = \"3 blind mice.\";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","template":"","required":[],"nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-one-or-more-times","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-numbers-and-letters-of-the-alphabet","id":"587d7db6367417b2b2512b98"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-characters-not-specified"}},
    "staticQueryHashes": ["1368483026","3216307819"]}