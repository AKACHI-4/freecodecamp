{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person",
    "result": {"data":{"challengeNode":{"challenge":{"block":"intermediate-algorithm-scripting","title":"Make a Person","description":"<section id=\"description\">\n<p>Fill in the object constructor with the following methods below:</p>\n<pre><code class=\"language-js\">getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)\n</code></pre>\n<p>Run the tests to see the expected output for each method. The methods that take an argument must accept only one argument and it has to be a string. These methods must be the only available means of interacting with the object.</p>\n</section>","id":"a2f1d72d9b908d0bd72bb9f6","hasEditableBoundaries":false,"instructions":null,"notes":null,"removeComments":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","certification":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16020,"fields":{"blockName":"Intermediate Algorithm Scripting","slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person","tests":[{"text":"<p>No properties should be added. <code>Object.keys(bob).length</code> should always return 6.</p>","testString":"assert.strictEqual(\n  Object.keys((function () {\n    let bob = new Person('Bob Ross');\n    bob.setFirstName('Haskell');\n    bob.setLastName('Curry');\n    bob.setFullName('John Smith');\n    return bob;\n  })()).length,\n  6\n );"},{"text":"<p><code>bob instanceof Person</code> should return <code>true</code>.</p>","testString":"assert.deepEqual(bob instanceof Person, true);"},{"text":"<p><code>bob.firstName</code> should return <code>undefined</code>.</p>","testString":"assert.deepEqual(bob.firstName, undefined);"},{"text":"<p><code>bob.lastName</code> should return <code>undefined</code>.</p>","testString":"assert.deepEqual(bob.lastName, undefined);"},{"text":"<p><code>bob.getFirstName()</code> should return the string <code>Bob</code>.</p>","testString":"assert.deepEqual(bob.getFirstName(), 'Bob');"},{"text":"<p><code>bob.getLastName()</code> should return the string <code>Ross</code>.</p>","testString":"assert.deepEqual(bob.getLastName(), 'Ross');"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Bob Ross</code>.</p>","testString":"assert.deepEqual(bob.getFullName(), 'Bob Ross');"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Haskell Ross</code> after <code>bob.setFirstName(\"Haskell\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFirstName('Haskell');\n    return bob.getFullName();\n  })(),\n  'Haskell Ross'\n);"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Haskell Curry</code> after <code>bob.setLastName(\"Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    var _bob = new Person('Haskell Ross');\n    _bob.setLastName('Curry');\n    return _bob.getFullName();\n  })(),\n  'Haskell Curry'\n);"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Haskell Curry</code> after <code>bob.setFullName(\"Haskell Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFullName('Haskell Curry');\n    return bob.getFullName();\n  })(),\n  'Haskell Curry'\n);"},{"text":"<p><code>bob.getFirstName()</code> should return the string <code>Haskell</code> after <code>bob.setFullName(\"Haskell Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFullName('Haskell Curry');\n    return bob.getFirstName();\n  })(),\n  'Haskell'\n);"},{"text":"<p><code>bob.getLastName()</code> should return the string <code>Curry</code> after <code>bob.setFullName(\"Haskell Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFullName('Haskell Curry');\n    return bob.getLastName();\n  })(),\n  'Curry'\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const Person = function(firstAndLast) {\n  // Only change code below this line\n  // Complete the method below and implement the others similarly\n  this.getFullName = function() {\n    return \"\";\n  };\n  return firstAndLast;\n};\n\nconst bob = new Person('Bob Ross');\nbob.getFullName();","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","block":"intermediate-algorithm-scripting","template":"","required":[],"nextChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/map-the-debris","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/arguments-optional","id":"a2f1d72d9b908d0bd72bb9f6"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person"}},
    "staticQueryHashes": ["1368483026","3216307819"]}