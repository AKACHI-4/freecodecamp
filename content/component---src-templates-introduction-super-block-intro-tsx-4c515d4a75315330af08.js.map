{"version":3,"file":"component---src-templates-introduction-super-block-intro-tsx-4c515d4a75315330af08.js","mappings":"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","sources":["webpack://@freecodecamp/client/../node_modules/@freecodecamp/react-bootstrap/lib/ProgressBar.js","webpack://@freecodecamp/client/./src/assets/icons/caret.tsx","webpack://@freecodecamp/client/./src/assets/icons/green-pass.tsx","webpack://@freecodecamp/client/../node_modules/lodash-es/uniq.js","webpack://@freecodecamp/client/./src/assets/icons/dropdown.tsx","webpack://@freecodecamp/client/./src/assets/icons/green-not-completed.tsx","webpack://@freecodecamp/client/./src/utils/is-a-cert.ts","webpack://@freecodecamp/client/./src/templates/Introduction/components/challenges.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/block.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/cert-challenge.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/legacy-links.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/super-block-intro.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/super-block-intro.tsx","webpack://@freecodecamp/client/../utils/is-audited.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _bootstrapUtils = require(\"./utils/bootstrapUtils\");\nvar _StyleConfig = require(\"./utils/StyleConfig\");\nvar _ValidComponentChildren = _interopRequireDefault(require(\"./utils/ValidComponentChildren\"));\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n  if (!children) {\n    return null;\n  }\n  var error = null;\n  _react.default.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n\n    var element = _react.default.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childIdentifier = _react.default.isValidElement(child) ? child.type.displayName || child.type.name || child.type : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\nvar propTypes = {\n  min: _propTypes.default.number,\n  now: _propTypes.default.number,\n  max: _propTypes.default.number,\n  label: _propTypes.default.node,\n  srOnly: _propTypes.default.bool,\n  striped: _propTypes.default.bool,\n  active: _propTypes.default.bool,\n  children: onlyProgressBar,\n  /**\n   * @private\n   */\n  isChild: _propTypes.default.bool\n};\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  active: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\nvar ProgressBar = /*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(ProgressBar, _React$Component);\n  function ProgressBar() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n  var _proto = ProgressBar.prototype;\n  _proto.renderProgressBar = function renderProgressBar(_ref) {\n    var _extends2;\n    var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      active = _ref.active,\n      className = _ref.className,\n      style = _ref.style,\n      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"active\", \"className\", \"style\"]);\n    var _splitBsProps = (0, _bootstrapUtils.splitBsProps)(props),\n      bsProps = _splitBsProps[0],\n      elementProps = _splitBsProps[1];\n    var classes = (0, _extends3.default)({}, (0, _bootstrapUtils.getClassSet)(bsProps), (_extends2 = {\n      active: active\n    }, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'striped')] = active || striped, _extends2));\n    return _react.default.createElement(\"div\", (0, _extends3.default)({}, elementProps, {\n      role: \"progressbar\",\n      className: (0, _classnames.default)(className, classes),\n      style: (0, _extends3.default)({\n        width: getPercentage(now, min, max) + \"%\"\n      }, style),\n      \"aria-valuenow\": now,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max\n    }), srOnly ? _react.default.createElement(\"span\", {\n      className: \"sr-only\"\n    }, label) : label);\n  };\n  _proto.render = function render() {\n    var _this$props = this.props,\n      isChild = _this$props.isChild,\n      props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"isChild\"]);\n    if (isChild) {\n      return this.renderProgressBar(props);\n    }\n    var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      active = props.active,\n      bsClass = props.bsClass,\n      bsStyle = props.bsStyle,\n      className = props.className,\n      children = props.children,\n      wrapperProps = (0, _objectWithoutPropertiesLoose2.default)(props, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"active\", \"bsClass\", \"bsStyle\", \"className\", \"children\"]);\n    return _react.default.createElement(\"div\", (0, _extends3.default)({}, wrapperProps, {\n      className: (0, _classnames.default)(className, 'progress')\n    }), children ? _ValidComponentChildren.default.map(children, function (child) {\n      return (0, _react.cloneElement)(child, {\n        isChild: true\n      });\n    }) : this.renderProgressBar({\n      min: min,\n      now: now,\n      max: max,\n      label: label,\n      srOnly: srOnly,\n      striped: striped,\n      active: active,\n      bsClass: bsClass,\n      bsStyle: bsStyle\n    }));\n  };\n  return ProgressBar;\n}(_react.default.Component);\nProgressBar.propTypes = propTypes;\nProgressBar.defaultProps = defaultProps;\nvar _default = (0, _bootstrapUtils.bsClass)('progress-bar', (0, _bootstrapUtils.bsStyles)(Object.values(_StyleConfig.State), ProgressBar));\nexports.default = _default;\nmodule.exports = exports[\"default\"];","import React from 'react';\n\nfunction Caret(): JSX.Element {\n  return (\n    <svg viewBox='0 0 100 100' width='25px'>\n      <polygon\n        points='-6.04047,17.1511 81.8903,58.1985 -3.90024,104.196'\n        style={{\n          stroke: 'var(--primary-color)',\n          fill: 'var(--primary-color)',\n          strokeWidth: '1px'\n        }}\n        transform={\n          'matrix(0.999729, 0.023281, -0.023281, 0.999729, 7.39321, -10.0425)'\n        }\n      />\n    </svg>\n  );\n}\n\nCaret.displayName = 'Caret';\n\nexport default Caret;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface GreenPassProps\n  extends JSX.IntrinsicAttributes,\n    React.SVGProps<SVGSVGElement> {\n  hushScreenReaderText?: boolean;\n}\nfunction GreenPass(props: GreenPassProps): JSX.Element {\n  const { t } = useTranslation();\n  const { hushScreenReaderText = false, ...rest } = props;\n  return (\n    <>\n      <svg\n        {...(hushScreenReaderText && { 'aria-hidden': true })}\n        {...(!hushScreenReaderText && { 'aria-label': t('icons.passed') })}\n        height='15'\n        viewBox='0 0 200 200'\n        width='15'\n        xmlns='http://www.w3.org/2000/svg'\n        {...rest}\n      >\n        <g aria-hidden='true'>\n          <title>{t('icons.passed')}</title>\n          <circle\n            cx='100'\n            cy='99'\n            fill='var(--primary-color)'\n            r='95'\n            stroke='var(--primary-color)'\n            strokeDasharray='null'\n          />\n          <rect\n            fill='var(--primary-background)'\n            height='30'\n            stroke='var(--primary-background)'\n            strokeDasharray='null'\n            transform='rotate(-45, 120, 106.321)'\n            width='128.85878'\n            x='55.57059'\n            y='91.32089'\n          />\n          <rect\n            fill='var(--primary-background)'\n            height='30'\n            stroke='var(--primary-background)'\n            strokeDasharray='null'\n            transform='rotate(45, 66.75, 123.75)'\n            width='80.66548'\n            x='26.41726'\n            y='108.75'\n          />\n        </g>\n      </svg>\n    </>\n  );\n}\n\nGreenPass.displayName = 'GreenPass';\n\nexport default GreenPass;\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return array && array.length ? baseUniq(array) : [];\n}\nexport default uniq;","import React from 'react';\n\nfunction DropDown(): JSX.Element {\n  return (\n    <svg\n      aria-hidden='true'\n      xmlns='http://www.w3.org/2000/svg'\n      width='10'\n      height='10'\n      viewBox='0 0 389 254'\n      fill='none'\n    >\n      <path\n        d='M194.5 0L388.5 254H307.5L194.5 99L78.5 254H0.5L194.5 0Z'\n        style={{\n          stroke: 'var(--primary-color)',\n          fill: 'var(--primary-color)',\n          strokeWidth: '1px'\n        }}\n      />\n    </svg>\n  );\n}\n\nDropDown.displayName = 'DropDown';\n\nexport default DropDown;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface GreenNotCompletedProps\n  extends JSX.IntrinsicAttributes,\n    React.SVGProps<SVGSVGElement> {\n  hushScreenReaderText?: boolean;\n}\n\nfunction GreenNotCompleted(props: GreenNotCompletedProps): JSX.Element {\n  const { t } = useTranslation();\n  const { hushScreenReaderText = false, ...rest } = props;\n  return (\n    <>\n      {!hushScreenReaderText && (\n        <span className='sr-only'>{t('icons.not-passed')}</span>\n      )}\n      <svg\n        aria-hidden='true'\n        height='15'\n        viewBox='0 0 200 200'\n        width='15'\n        xmlns='http://www.w3.org/2000/svg'\n        {...rest}\n      >\n        <g>\n          <title>{t('icons.not-passed')}</title>\n          <circle\n            cx='100'\n            cy='99'\n            fill='var(--primary-background)'\n            r='95'\n            stroke='var(--primary-color)'\n            strokeDasharray='null'\n            strokeWidth='10'\n          />\n        </g>\n      </svg>\n    </>\n  );\n}\n\nGreenNotCompleted.displayName = 'GreenNotCompleted';\n\nexport default GreenNotCompleted;\n","import { SuperBlocks } from '../../../config/certification-settings';\n\nexport function isNewRespCert(superBlock: string): boolean {\n  return superBlock === SuperBlocks.RespWebDesignNew;\n}\n\nexport function isOldRespCert(superBlock: string): boolean {\n  return superBlock === SuperBlocks.RespWebDesign;\n}\n\nexport function isNewJsCert(superBlock: string): boolean {\n  return superBlock === SuperBlocks.JsAlgoDataStructNew;\n}\n\nexport function isRelationalDbCert(superBlock: string): boolean {\n  return superBlock === SuperBlocks.RelationalDb;\n}\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { withTranslation, useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\n\nimport GreenNotCompleted from '../../../assets/icons/green-not-completed';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { executeGA } from '../../../redux/actions';\nimport { SuperBlocks } from '../../../../../config/certification-settings';\nimport { ChallengeWithCompletedNode } from '../../../redux/prop-types';\nimport { isNewJsCert, isNewRespCert } from '../../../utils/is-a-cert';\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ executeGA }, dispatch);\n\ninterface Challenges {\n  challengesWithCompleted: ChallengeWithCompletedNode[];\n  isProjectBlock: boolean;\n  superBlock: SuperBlocks;\n  blockTitle?: string | null;\n}\n\nfunction Challenges({\n  challengesWithCompleted,\n  isProjectBlock,\n  superBlock,\n  blockTitle\n}: Challenges): JSX.Element {\n  const { t } = useTranslation();\n\n  const renderCheckMark = (isCompleted: boolean) =>\n    isCompleted ? <GreenPass /> : <GreenNotCompleted />;\n\n  const isGridMap = isNewRespCert(superBlock) || isNewJsCert(superBlock);\n\n  const firstIncompleteChallenge = challengesWithCompleted.find(\n    challenge => !challenge.isCompleted\n  );\n\n  const isChallengeStarted = !!challengesWithCompleted.find(\n    challenge => challenge.isCompleted\n  );\n\n  return isGridMap ? (\n    <>\n      {firstIncompleteChallenge && (\n        <div className='challenge-jump-link'>\n          <Link\n            className='btn btn-primary'\n            to={firstIncompleteChallenge.fields.slug}\n          >\n            {!isChallengeStarted\n              ? t('buttons.start-project')\n              : t('buttons.resume-project')}{' '}\n            {blockTitle && <span className='sr-only'>{blockTitle}</span>}\n          </Link>\n        </div>\n      )}\n      <nav\n        aria-label={\n          blockTitle ? t('aria.steps-for', { blockTitle }) : t('aria.steps')\n        }\n      >\n        <ul className={`map-challenges-ul map-challenges-grid `}>\n          {challengesWithCompleted.map((challenge, i) => (\n            <li\n              className={`map-challenge-title map-challenge-title-grid ${\n                isProjectBlock ? 'map-project-wrap' : 'map-challenge-wrap'\n              }`}\n              id={challenge.dashedName}\n              key={`map-challenge ${challenge.fields.slug}`}\n            >\n              {!isProjectBlock ? (\n                <Link\n                  to={challenge.fields.slug}\n                  className={`map-grid-item ${\n                    +challenge.isCompleted ? 'challenge-completed' : ''\n                  }`}\n                >\n                  <span className='sr-only'>{t('aria.step')}</span>\n                  <span>{i + 1}</span>\n                  <span className='sr-only'>\n                    {challenge.isCompleted\n                      ? t('icons.passed')\n                      : t('icons.not-passed')}\n                  </span>\n                </Link>\n              ) : (\n                <Link to={challenge.fields.slug}>\n                  {challenge.title}\n                  <span className=' badge map-badge map-project-checkmark'>\n                    {renderCheckMark(challenge.isCompleted)}\n                  </span>\n                </Link>\n              )}\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </>\n  ) : (\n    <ul className={`map-challenges-ul`}>\n      {challengesWithCompleted.map(challenge => (\n        <li\n          className={`map-challenge-title ${\n            isProjectBlock ? 'map-project-wrap' : 'map-challenge-wrap'\n          }`}\n          id={challenge.dashedName}\n          key={'map-challenge' + challenge.fields.slug}\n        >\n          {!isProjectBlock ? (\n            <Link to={challenge.fields.slug}>\n              <span className='badge map-badge'>\n                {renderCheckMark(challenge.isCompleted)}\n              </span>\n              {challenge.title}\n            </Link>\n          ) : (\n            <Link to={challenge.fields.slug}>\n              {challenge.title}\n              <span className='badge map-badge map-project-checkmark'>\n                {renderCheckMark(challenge.isCompleted)}\n              </span>\n            </Link>\n          )}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nChallenges.displayName = 'Challenges';\n\nexport default connect(null, mapDispatchToProps)(withTranslation()(Challenges));\n","import React, { Component } from 'react';\nimport { withTranslation, TFunction } from 'react-i18next';\nimport { ProgressBar } from '@freecodecamp/react-bootstrap';\nimport { connect } from 'react-redux';\nimport ScrollableAnchor from 'react-scrollable-anchor';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { SuperBlocks } from '../../../../../config/certification-settings';\nimport envData from '../../../../../config/env.json';\nimport { isAuditedCert } from '../../../../../utils/is-audited';\nimport Caret from '../../../assets/icons/caret';\nimport DropDown from '../../../assets/icons/dropdown';\nimport GreenNotCompleted from '../../../assets/icons/green-not-completed';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { Link, Spacer } from '../../../components/helpers';\nimport { completedChallengesSelector } from '../../../redux/selectors';\nimport { ChallengeNode, CompletedChallenge } from '../../../redux/prop-types';\nimport { playTone } from '../../../utils/tone';\nimport { makeExpandedBlockSelector, toggleBlock } from '../redux';\nimport { isNewJsCert, isNewRespCert } from '../../../utils/is-a-cert';\nimport {\n  isCodeAllyPractice,\n  isFinalProject\n} from '../../../../utils/challenge-types';\nimport Challenges from './challenges';\nimport '../intro.css';\n\nconst { curriculumLocale } = envData;\n\nconst mapStateToProps = (\n  state: unknown,\n  ownProps: { blockDashedName: string } & unknown\n) => {\n  const expandedSelector = makeExpandedBlockSelector(ownProps.blockDashedName);\n\n  return createSelector(\n    expandedSelector,\n    completedChallengesSelector,\n    (isExpanded: boolean, completedChallenges: CompletedChallenge[]) => ({\n      isExpanded,\n      completedChallengeIds: completedChallenges.map(({ id }) => id)\n    })\n  )(state as Record<string, unknown>);\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ toggleBlock }, dispatch);\n\ninterface BlockProps {\n  blockDashedName: string;\n  challenges: ChallengeNode[];\n  completedChallengeIds: string[];\n  isExpanded: boolean;\n  superBlock: SuperBlocks;\n  t: TFunction;\n  toggleBlock: typeof toggleBlock;\n}\nclass Block extends Component<BlockProps> {\n  static displayName: string;\n  constructor(props: BlockProps) {\n    super(props);\n\n    this.handleBlockClick = this.handleBlockClick.bind(this);\n  }\n\n  handleBlockClick(): void {\n    const { blockDashedName, toggleBlock } = this.props;\n    void playTone('block-toggle');\n    toggleBlock(blockDashedName);\n  }\n\n  renderCheckMark(isCompleted: boolean): JSX.Element {\n    return isCompleted ? (\n      <GreenPass hushScreenReaderText />\n    ) : (\n      <GreenNotCompleted hushScreenReaderText />\n    );\n  }\n\n  renderBlockIntros(arr: string[]): JSX.Element {\n    return (\n      <div className='block-description'>\n        {arr.map((str, i) => (\n          <p dangerouslySetInnerHTML={{ __html: str }} key={i} />\n        ))}\n      </div>\n    );\n  }\n\n  render(): JSX.Element {\n    const {\n      blockDashedName,\n      completedChallengeIds,\n      challenges,\n      isExpanded,\n      superBlock,\n      t\n    } = this.props;\n\n    const isNewResponsiveWebDesign = isNewRespCert(superBlock);\n    const isNewJsAlgos = isNewJsCert(superBlock);\n    const isOdinProject = blockDashedName == 'the-odin-project';\n\n    let completedCount = 0;\n    const challengesWithCompleted = challenges.map(({ challenge }) => {\n      const { id } = challenge;\n      const isCompleted = completedChallengeIds.some(\n        (completedChallengeId: string) => completedChallengeId === id\n      );\n      if (isCompleted) {\n        completedCount++;\n      }\n      return { ...challenge, isCompleted };\n    });\n\n    const isProjectBlock = challenges.some(({ challenge }) => {\n      const isTakeHomeProject = blockDashedName === 'take-home-projects';\n\n      return (\n        (isFinalProject(challenge.challengeType) ||\n          isCodeAllyPractice(challenge.challengeType)) &&\n        !isTakeHomeProject\n      );\n    });\n\n    const blockIntroObj: { title?: string; intro: string[] } = t(\n      `intro:${superBlock}.blocks.${blockDashedName}`\n    );\n    const blockTitle = blockIntroObj ? blockIntroObj.title : null;\n    const blockIntroArr = blockIntroObj ? blockIntroObj.intro : [];\n    const {\n      expand: expandText,\n      collapse: collapseText\n    }: {\n      expand: string;\n      collapse: string;\n    } = t('intro:misc-text');\n\n    const isBlockCompleted = completedCount === challengesWithCompleted.length;\n\n    const percentageCompleted = Math.floor(\n      (completedCount / challengesWithCompleted.length) * 100\n    );\n\n    const progressBarRender = (\n      <div aria-hidden='true' className='progress-wrapper'>\n        <ProgressBar now={percentageCompleted} />\n        <span>{`${percentageCompleted}%`}</span>\n      </div>\n    );\n\n    const Block = (\n      <>\n        {' '}\n        <ScrollableAnchor id={blockDashedName}>\n          <div className={`block ${isExpanded ? 'open' : ''}`}>\n            <div className='block-header'>\n              <h3 className='big-block-title'>{blockTitle}</h3>\n              {!isAuditedCert(curriculumLocale, superBlock) && (\n                <div className='block-cta-wrapper'>\n                  <Link\n                    className='block-title-translation-cta'\n                    to={t('links:help-translate-link-url')}\n                  >\n                    {t('misc.translation-pending')}\n                  </Link>\n                </div>\n              )}\n            </div>\n            {this.renderBlockIntros(blockIntroArr)}\n            <button\n              aria-expanded={isExpanded}\n              className='map-title'\n              onClick={() => {\n                this.handleBlockClick();\n              }}\n            >\n              <Caret />\n              <div className='course-title'>\n                {`${isExpanded ? collapseText : expandText}`}{' '}\n                <span className='sr-only'>{blockTitle}</span>\n              </div>\n              <div className='map-title-completed course-title'>\n                {this.renderCheckMark(isBlockCompleted)}\n                <span\n                  aria-hidden='true'\n                  className='map-completed-count'\n                >{`${completedCount}/${challengesWithCompleted.length}`}</span>\n                <span className='sr-only'>\n                  ,{' '}\n                  {t('learn.challenges-completed', {\n                    completedCount,\n                    totalChallenges: challengesWithCompleted.length\n                  })}\n                </span>\n              </div>\n            </button>\n            {isExpanded && (\n              <Challenges\n                challengesWithCompleted={challengesWithCompleted}\n                isProjectBlock={isProjectBlock}\n                superBlock={superBlock}\n              />\n            )}\n          </div>\n        </ScrollableAnchor>\n      </>\n    );\n\n    const ProjectBlock = (\n      <>\n        <ScrollableAnchor id={blockDashedName}>\n          <div className='block'>\n            <div className='block-header'>\n              <h3 className='big-block-title'>{blockTitle}</h3>\n              {!isAuditedCert(curriculumLocale, superBlock) && (\n                <div className='block-cta-wrapper'>\n                  <Link\n                    className='block-title-translation-cta'\n                    to={t('links:help-translate-link-url')}\n                  >\n                    {t('misc.translation-pending')}\n                  </Link>\n                </div>\n              )}\n            </div>\n            {this.renderBlockIntros(blockIntroArr)}\n            <Challenges\n              challengesWithCompleted={challengesWithCompleted}\n              isProjectBlock={isProjectBlock}\n              superBlock={superBlock}\n            />\n          </div>\n        </ScrollableAnchor>\n      </>\n    );\n\n    const courseCompletionStatus = () => {\n      if (completedCount === 0) {\n        return t('learn.not-started');\n      }\n      if (completedCount === challengesWithCompleted.length) {\n        return t('learn.completed');\n      }\n      return `${percentageCompleted}% ${t('learn.completed')}`;\n    };\n\n    const GridBlock = (\n      <>\n        {' '}\n        <ScrollableAnchor id={blockDashedName}>\n          <div className={`block block-grid ${isExpanded ? 'open' : ''}`}>\n            <h3 className='block-grid-title'>\n              <button\n                aria-expanded={isExpanded ? 'true' : 'false'}\n                className='block-header'\n                data-cy={challengesWithCompleted[0].block}\n                onClick={() => {\n                  this.handleBlockClick();\n                }}\n              >\n                <span className='block-header-button-text map-title'>\n                  {this.renderCheckMark(isBlockCompleted)}\n                  <span>\n                    {blockTitle}\n                    <span className='sr-only'>\n                      , {courseCompletionStatus()}\n                    </span>\n                  </span>\n                  <DropDown />\n                </span>\n                {!isExpanded &&\n                  !isBlockCompleted &&\n                  completedCount > 0 &&\n                  progressBarRender}\n              </button>\n            </h3>\n            <div className='tags-wrapper'>\n              {!isAuditedCert(curriculumLocale, superBlock) && (\n                <Link\n                  className='cert-tag'\n                  to={t('links:help-translate-link-url')}\n                >\n                  {t('misc.translation-pending')}\n                </Link>\n              )}\n            </div>\n            {isExpanded && this.renderBlockIntros(blockIntroArr)}\n            {isExpanded && (\n              <Challenges\n                challengesWithCompleted={challengesWithCompleted}\n                isProjectBlock={isProjectBlock}\n                superBlock={superBlock}\n                blockTitle={blockTitle}\n              />\n            )}\n          </div>\n        </ScrollableAnchor>\n      </>\n    );\n\n    const GridProjectBlock = (\n      <ScrollableAnchor id={blockDashedName}>\n        <div className='block block-grid grid-project-block'>\n          <Link\n            className='block-header'\n            onClick={() => {\n              this.handleBlockClick();\n            }}\n            to={challengesWithCompleted[0].fields.slug}\n          >\n            <div className='tags-wrapper'>\n              <span className='cert-tag'>\n                {t('misc.certification-project')}\n              </span>\n              {!isAuditedCert(curriculumLocale, superBlock) && (\n                <Link\n                  className='cert-tag'\n                  to={t('links:help-translate-link-url')}\n                >\n                  {t('misc.translation-pending')}\n                </Link>\n              )}\n            </div>\n            <div className='title-wrapper map-title'>\n              {this.renderCheckMark(isBlockCompleted)}\n              <h3 className='block-grid-title'>{blockTitle}</h3>\n            </div>\n            {this.renderBlockIntros(blockIntroArr)}\n          </Link>\n        </div>\n      </ScrollableAnchor>\n    );\n\n    const blockrenderer = () => {\n      if (isProjectBlock && !isOdinProject)\n        return isNewResponsiveWebDesign || isNewJsAlgos\n          ? GridProjectBlock\n          : ProjectBlock;\n      return isNewResponsiveWebDesign || isNewJsAlgos ? GridBlock : Block;\n    };\n\n    return (\n      <>\n        {blockrenderer()}\n        {(isNewResponsiveWebDesign || isNewJsAlgos) &&\n        !isProjectBlock ? null : (\n          <Spacer />\n        )}\n      </>\n    );\n  }\n}\n\nBlock.displayName = 'Block';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(Block));\n","import { Button } from '@freecodecamp/react-bootstrap';\nimport { navigate } from 'gatsby-link';\nimport React, { useState, useEffect, MouseEvent } from 'react';\nimport { TFunction, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport {\n  certSlugTypeMap,\n  superBlockCertTypeMap,\n  SuperBlocks\n} from '../../../../../config/certification-settings';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\nimport {\n  isSignedInSelector,\n  userFetchStateSelector,\n  currentCertsSelector\n} from '../../../redux/selectors';\nimport { User, Steps } from '../../../redux/prop-types';\nimport { verifyCert } from '../../../redux/settings/actions';\nimport { certMap } from '../../../resources/cert-and-project-map';\n\ninterface CertChallengeProps {\n  // TODO: create enum/reuse SuperBlocks enum somehow\n  certification: string;\n  createFlashMessage: typeof createFlashMessage;\n  fetchState: {\n    pending: boolean;\n    complete: boolean;\n    errored: boolean;\n    error: null | string;\n  };\n  isSignedIn: boolean;\n  currentCerts: Steps['currentCerts'];\n  superBlock: SuperBlocks;\n  t: TFunction;\n  title: (typeof certMap)[number]['title'];\n  user: User;\n  verifyCert: typeof verifyCert;\n}\n\nconst honestyInfoMessage = {\n  type: 'info',\n  message: FlashMessages.HonestFirst\n};\n\nconst mapStateToProps = (state: unknown) => {\n  return createSelector(\n    currentCertsSelector,\n    userFetchStateSelector,\n    isSignedInSelector,\n    (\n      currentCerts,\n      fetchState: CertChallengeProps['fetchState'],\n      isSignedIn\n    ) => ({\n      currentCerts,\n      fetchState,\n      isSignedIn\n    })\n  )(state as Record<string, unknown>);\n};\n\nconst mapDispatchToProps = {\n  createFlashMessage,\n  verifyCert\n};\n\nconst CertChallenge = ({\n  createFlashMessage,\n  currentCerts,\n  superBlock,\n  t,\n  verifyCert,\n  title,\n  fetchState,\n  isSignedIn,\n  user: { isHonest, username }\n}: CertChallengeProps): JSX.Element => {\n  const [isCertified, setIsCertified] = useState(false);\n  const [userLoaded, setUserLoaded] = useState(false);\n\n  // @ts-expect-error Typescript is confused\n  const certSlug = certMap.find(x => x.title === title).certSlug;\n\n  useEffect(() => {\n    const { pending, complete } = fetchState;\n\n    if (complete && !pending) {\n      setUserLoaded(true);\n    }\n  }, [fetchState]);\n\n  const certSlugTypeMapTyped: { [key: string]: string } = certSlugTypeMap;\n  const superBlockCertTypeMapTyped: { [key: string]: string } =\n    superBlockCertTypeMap;\n\n  useEffect(() => {\n    setIsCertified(\n      currentCerts?.find(\n        (cert: { certSlug: string }) =>\n          certSlugTypeMapTyped[cert.certSlug] ===\n          superBlockCertTypeMapTyped[superBlock]\n      )?.show ?? false\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentCerts]);\n\n  const certLocation = `/certification/${username}/${certSlug}`;\n\n  const createClickHandler =\n    (certSlug: string | undefined) => (e: MouseEvent<HTMLAnchorElement>) => {\n      e.preventDefault();\n      if (isCertified) {\n        return navigate(certLocation);\n      }\n      return isHonest\n        ? verifyCert(certSlug)\n        : createFlashMessage(honestyInfoMessage);\n    };\n  return (\n    <div className='block'>\n      {isSignedIn && (\n        <Button\n          block={true}\n          bsStyle='primary'\n          className='cert-btn'\n          href={isCertified ? certLocation : `/settings#certification-settings`}\n          onClick={() => (isCertified ? createClickHandler(certSlug) : false)}\n        >\n          {isCertified && userLoaded\n            ? t('buttons.show-cert')\n            : t('buttons.go-to-settings')}{' '}\n          <span className='sr-only'>{title}</span>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nCertChallenge.displayName = 'CertChallenge';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(CertChallenge));\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/react-bootstrap';\nimport { SuperBlocks } from '../../../../../config/certification-settings';\nimport {\n  isNewRespCert,\n  isOldRespCert,\n  isRelationalDbCert\n} from '../../../utils/is-a-cert';\nimport { Link } from '../../../components/helpers';\nimport envData from '../../../../../config/env.json';\n\nconst { clientLocale } = envData;\n\ninterface LegacyLinksProps {\n  superBlock: SuperBlocks;\n}\n\nfunction LegacyLinks({ superBlock }: LegacyLinksProps): JSX.Element {\n  const { t } = useTranslation();\n\n  if (isOldRespCert(superBlock))\n    return (\n      <>\n        <Alert bsStyle='info'>\n          <p>\n            {t('intro:misc-text.legacy-desc')}{' '}\n            <Link sameTab={false} to={`/learn/2022/responsive-web-design`}>\n              {t('intro:misc-text.legacy-go-back')}\n            </Link>\n          </p>\n        </Alert>\n      </>\n    );\n  else if (isNewRespCert(superBlock))\n    return (\n      <>\n        <Alert bsStyle='info'>\n          <p>\n            {t('intro:misc-text.new-rwd-desc')}{' '}\n            <Link\n              sameTab={false}\n              external={true}\n              to={\n                'https://forum.freecodecamp.org/t/responsive-web-design-updates/508345'\n              }\n            >\n              {t('intro:misc-text.new-rwd-article')}\n            </Link>\n          </p>\n        </Alert>\n      </>\n    );\n  else if (isRelationalDbCert(superBlock))\n    return (\n      <>\n        {clientLocale != 'english' && (\n          <Alert bsStyle='info'>\n            <p>{t('intro:misc-text.english-only')}</p>\n          </Alert>\n        )}\n        <Alert bsStyle='info'>\n          <p>\n            {t('intro:misc-text.viewing-upcoming-change')}{' '}\n            <Link\n              external={true}\n              sameTab={false}\n              to={`https://forum.freecodecamp.org/t/how-to-troubleshoot-the-web-version-of-the-relational-database-curriculum/500231`}\n            >\n              {t('intro:misc-text.read-database-cert-article')}\n            </Link>\n          </p>\n        </Alert>\n      </>\n    );\n  else return <></>;\n}\n\nexport default LegacyLinks;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SuperBlocks } from '../../../../../config/certification-settings';\nimport { generateIconComponent } from '../../../assets/icons';\nimport { Spacer } from '../../../components/helpers';\n\ninterface SuperBlockIntroProps {\n  superBlock: SuperBlocks;\n}\n\nfunction SuperBlockIntro(props: SuperBlockIntroProps): JSX.Element {\n  const { t } = useTranslation();\n  const { superBlock } = props;\n\n  const superBlockIntroObj: {\n    title: string;\n    intro: string[];\n    note: string[];\n  } = t(`intro:${superBlock}`);\n  const {\n    title: i18nSuperBlock,\n    intro: superBlockIntroText,\n    note: superBlockNoteText\n  } = superBlockIntroObj;\n\n  return (\n    <>\n      <h1 className='text-center big-heading'>{i18nSuperBlock}</h1>\n      <Spacer />\n      {generateIconComponent(superBlock, 'cert-header-icon')}\n      <Spacer />\n      {superBlockIntroText.map((str, i) => (\n        <p key={i}>{str}</p>\n      ))}\n      {superBlockNoteText && (\n        <div className='alert alert-info' style={{ marginTop: '2rem' }}>\n          {superBlockNoteText}\n        </div>\n      )}\n    </>\n  );\n}\n\nSuperBlockIntro.displayName = 'SuperBlockIntro';\n\nexport default SuperBlockIntro;\n","import { Grid, Row, Col } from '@freecodecamp/react-bootstrap';\nimport { WindowLocation } from '@reach/router';\nimport { graphql } from 'gatsby';\nimport { uniq } from 'lodash-es';\nimport React, { Fragment, useEffect, memo } from 'react';\nimport Helmet from 'react-helmet';\nimport { TFunction, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { configureAnchors } from 'react-scrollable-anchor';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\nimport { SuperBlocks } from '../../../../config/certification-settings';\nimport { getSuperBlockTitleForMap } from '../../utils/superblock-map-titles';\nimport DonateModal from '../../components/Donation/donation-modal';\nimport Login from '../../components/Header/components/Login';\nimport Map from '../../components/Map';\nimport { Spacer } from '../../components/helpers';\nimport { tryToShowDonationModal } from '../../redux/actions';\nimport {\n  isSignedInSelector,\n  userSelector,\n  currentChallengeIdSelector,\n  userFetchStateSelector,\n  signInLoadingSelector\n} from '../../redux/selectors';\nimport { MarkdownRemark, AllChallengeNode, User } from '../../redux/prop-types';\nimport Block from './components/block';\nimport CertChallenge from './components/cert-challenge';\nimport LegacyLinks from './components/legacy-links';\nimport SuperBlockIntro from './components/super-block-intro';\nimport { resetExpansion, toggleBlock } from './redux';\n\nimport './intro.css';\n\ntype FetchState = {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n};\n\ntype SuperBlockProp = {\n  currentChallengeId: string;\n  data: {\n    markdownRemark: MarkdownRemark;\n    allChallengeNode: AllChallengeNode;\n  };\n  expandedState: {\n    [key: string]: boolean;\n  };\n  fetchState: FetchState;\n  isSignedIn: boolean;\n  signInLoading: boolean;\n  location: WindowLocation<{ breadcrumbBlockClick: string }>;\n  resetExpansion: () => void;\n  t: TFunction;\n  toggleBlock: (arg0: string) => void;\n  tryToShowDonationModal: () => void;\n  user: User;\n};\n\nconfigureAnchors({ offset: -40, scrollDuration: 0 });\n\nconst mapStateToProps = (state: Record<string, unknown>) => {\n  return createSelector(\n    currentChallengeIdSelector,\n    isSignedInSelector,\n    signInLoadingSelector,\n    userFetchStateSelector,\n    userSelector,\n    (\n      currentChallengeId: string,\n      isSignedIn,\n      signInLoading: boolean,\n      fetchState: FetchState,\n      user: User\n    ) => ({\n      currentChallengeId,\n      isSignedIn,\n      signInLoading,\n      fetchState,\n      user\n    })\n  )(state);\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      tryToShowDonationModal,\n      resetExpansion,\n      toggleBlock: b => toggleBlock(b)\n    },\n    dispatch\n  );\n\nconst SuperBlockIntroductionPage = (props: SuperBlockProp) => {\n  useEffect(() => {\n    initializeExpandedState();\n    props.tryToShowDonationModal();\n\n    setTimeout(() => {\n      configureAnchors({ offset: -40, scrollDuration: 400 });\n    }, 0);\n\n    return () => {\n      configureAnchors({ offset: -40, scrollDuration: 0 });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getChosenBlock = (): string => {\n    const {\n      data: {\n        allChallengeNode: { edges }\n      },\n      isSignedIn,\n      currentChallengeId,\n      location\n    }: SuperBlockProp = props;\n\n    // if coming from breadcrumb click\n    if (\n      location.state &&\n      typeof location.state === 'object' &&\n      Object.prototype.hasOwnProperty.call(\n        location.state,\n        'breadcrumbBlockClick'\n      )\n    ) {\n      return location.state.breadcrumbBlockClick;\n    }\n\n    // if the URL includes a hash\n    if (location.hash) {\n      const dashedBlock = location.hash.replace('#', '').replace('/', '');\n      return dashedBlock;\n    }\n\n    const edge = edges[0];\n\n    if (isSignedIn) {\n      // see if currentChallenge is in this superBlock\n      const currentChallengeEdge = edges.find(\n        edge => edge.node.challenge.id === currentChallengeId\n      );\n\n      return currentChallengeEdge\n        ? currentChallengeEdge.node.challenge.block\n        : edge.node.challenge.block;\n    }\n\n    return edge.node.challenge.block;\n  };\n\n  const initializeExpandedState = () => {\n    const { resetExpansion, toggleBlock } = props;\n\n    resetExpansion();\n    return toggleBlock(getChosenBlock());\n  };\n\n  const {\n    data: {\n      markdownRemark: {\n        frontmatter: { superBlock, title, certification }\n      },\n      allChallengeNode: { edges }\n    },\n    isSignedIn,\n    signInLoading,\n    t,\n    user\n  } = props;\n\n  const nodesForSuperBlock = edges.map(({ node }) => node);\n  const blockDashedNames = uniq(\n    nodesForSuperBlock.map(({ challenge: { block } }) => block)\n  );\n\n  const i18nTitle = getSuperBlockTitleForMap(superBlock);\n  const defaultCurriculumNames = blockDashedNames;\n\n  return (\n    <>\n      <Helmet>\n        <title>{i18nTitle} | freeCodeCamp.org</title>\n      </Helmet>\n      <Grid>\n        <main>\n          <Row className='super-block-intro-page'>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size={2} />\n              <LegacyLinks superBlock={superBlock} />\n              <SuperBlockIntro superBlock={superBlock} />\n              <Spacer size={2} />\n              <h2 className='text-center big-subheading'>\n                {t(`intro:misc-text.courses`)}\n              </h2>\n              <Spacer />\n              <div className='block-ui'>\n                {defaultCurriculumNames.map(blockDashedName => (\n                  <Fragment key={blockDashedName}>\n                    <Block\n                      blockDashedName={blockDashedName}\n                      challenges={nodesForSuperBlock.filter(\n                        node => node.challenge.block === blockDashedName\n                      )}\n                      superBlock={superBlock}\n                    />\n                  </Fragment>\n                ))}\n                {superBlock !== SuperBlocks.CodingInterviewPrep && (\n                  <div>\n                    <CertChallenge\n                      certification={certification}\n                      superBlock={superBlock}\n                      title={title}\n                      user={user}\n                    />\n                  </div>\n                )}\n              </div>\n              {!isSignedIn && !signInLoading && (\n                <div>\n                  <Spacer size={2} />\n                  <Login block={true}>{t('buttons.logged-out-cta-btn')}</Login>\n                </div>\n              )}\n              <Spacer size={2} />\n              <h3\n                className='text-center big-block-title'\n                style={{ whiteSpace: 'pre-line' }}\n              >\n                {t(`intro:misc-text.browse-other`)}\n              </h3>\n              <Spacer />\n              <Map currentSuperBlock={superBlock} />\n              <Spacer size={2} />\n            </Col>\n          </Row>\n        </main>\n      </Grid>\n      <DonateModal location={props.location} />\n    </>\n  );\n};\n\nSuperBlockIntroductionPage.displayName = 'SuperBlockIntroductionPage';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(memo(SuperBlockIntroductionPage)));\n\nexport const query = graphql`\n  query SuperBlockIntroPageBySlug($slug: String!, $superBlock: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      frontmatter {\n        certification\n        superBlock\n        title\n      }\n    }\n    allChallengeNode(\n      sort: {\n        fields: [\n          challenge___superOrder\n          challenge___order\n          challenge___challengeOrder\n        ]\n      }\n      filter: { challenge: { superBlock: { eq: $superBlock } } }\n    ) {\n      edges {\n        node {\n          challenge {\n            fields {\n              slug\n              blockName\n            }\n            id\n            block\n            challengeType\n            title\n            order\n            superBlock\n            dashedName\n          }\n        }\n      }\n    }\n  }\n`;\n","const { getAuditedSuperBlocks } = require('../config/superblock-order');\n\nfunction isAuditedCert(language, superblock) {\n  if (!language || !superblock)\n    throw Error('Both arguments must be provided for auditing');\n\n  const auditedSuperBlocks = getAuditedSuperBlocks(language);\n  return auditedSuperBlocks.includes(superblock);\n}\n\nexports.isAuditedCert = isAuditedCert;\n"],"names":["_interopRequireWildcard","_interopRequireDefault","exports","__esModule","_extends3","_objectWithoutPropertiesLoose2","_inheritsLoose2","_classnames","_react","_propTypes","_bootstrapUtils","_StyleConfig","_ValidComponentChildren","propTypes","min","default","number","now","max","label","node","srOnly","bool","striped","active","children","props","propName","componentName","error","Children","forEach","child","element","createElement","ProgressBar","type","childIdentifier","isValidElement","displayName","name","Error","isChild","getPercentage","percentage","Math","round","_React$Component","apply","this","arguments","_proto","prototype","renderProgressBar","_ref","_extends2","className","style","_splitBsProps","splitBsProps","bsProps","elementProps","classes","getClassSet","prefix","role","width","render","_this$props","bsClass","bsStyle","wrapperProps","map","cloneElement","Component","defaultProps","_default","bsStyles","Object","values","State","module","Caret","viewBox","points","stroke","fill","strokeWidth","transform","GreenPass","t","useTranslation","hushScreenReaderText","rest","height","xmlns","cx","cy","r","strokeDasharray","x","y","array","length","DropDown","d","GreenNotCompleted","isNewRespCert","superBlock","SuperBlocks","isNewJsCert","Challenges","challengesWithCompleted","isProjectBlock","blockTitle","renderCheckMark","isCompleted","isGridMap","firstIncompleteChallenge","find","challenge","isChallengeStarted","Link","to","fields","slug","i","id","dashedName","key","title","connect","dispatch","bindActionCreators","executeGA","withTranslation","curriculumLocale","envData","Block","handleBlockClick","bind","blockDashedName","toggleBlock","playTone","renderBlockIntros","arr","str","dangerouslySetInnerHTML","__html","completedChallengeIds","challenges","isExpanded","isNewResponsiveWebDesign","isNewJsAlgos","isOdinProject","completedCount","some","completedChallengeId","isTakeHomeProject","isFinalProject","challengeType","isCodeAllyPractice","blockIntroObj","blockIntroArr","intro","expandText","expand","collapseText","collapse","isBlockCompleted","percentageCompleted","floor","progressBarRender","isAuditedCert","onClick","totalChallenges","ProjectBlock","GridBlock","block","GridProjectBlock","state","ownProps","expandedSelector","makeExpandedBlockSelector","createSelector","completedChallengesSelector","completedChallenges","honestyInfoMessage","message","FlashMessages","mapDispatchToProps","createFlashMessage","verifyCert","CertChallenge","currentCerts","fetchState","isSignedIn","user","isHonest","username","useState","isCertified","setIsCertified","userLoaded","setUserLoaded","certSlug","certMap","useEffect","pending","complete","certSlugTypeMapTyped","certSlugTypeMap","superBlockCertTypeMapTyped","superBlockCertTypeMap","cert","show","certLocation","href","e","preventDefault","navigate","createClickHandler","currentCertsSelector","userFetchStateSelector","isSignedInSelector","clientLocale","isOldRespCert","sameTab","external","isRelationalDbCert","SuperBlockIntro","superBlockIntroObj","i18nSuperBlock","superBlockIntroText","superBlockNoteText","note","generateIconComponent","marginTop","configureAnchors","offset","scrollDuration","SuperBlockIntroductionPage","initializeExpandedState","tryToShowDonationModal","setTimeout","resetExpansion","edges","data","allChallengeNode","currentChallengeId","location","hasOwnProperty","call","breadcrumbBlockClick","hash","replace","edge","currentChallengeEdge","getChosenBlock","markdownRemark","frontmatter","certification","signInLoading","nodesForSuperBlock","blockDashedNames","i18nTitle","getSuperBlockTitleForMap","defaultCurriculumNames","Helmet","md","mdOffset","sm","smOffset","xs","size","Fragment","filter","Login","whiteSpace","Map","currentSuperBlock","currentChallengeIdSelector","signInLoadingSelector","userSelector","b","memo","getAuditedSuperBlocks","require","language","superblock","includes"],"sourceRoot":""}