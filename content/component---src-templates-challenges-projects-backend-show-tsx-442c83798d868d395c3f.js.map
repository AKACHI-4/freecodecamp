{"version":3,"file":"component---src-templates-challenges-projects-backend-show-tsx-442c83798d868d395c3f.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/templates/Challenges/projects/backend/Show.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport { Col, Grid, Row } from '@freecodecamp/react-bootstrap';\nimport { graphql } from 'gatsby';\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport { TFunction, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport Spacer from '../../../../components/helpers/spacer';\nimport LearnLayout from '../../../../components/layouts/learn';\nimport { isSignedInSelector } from '../../../../redux/selectors';\nimport {\n  ChallengeMeta,\n  ChallengeNode,\n  Test\n} from '../../../../redux/prop-types';\nimport ChallengeDescription from '../../components/Challenge-Description';\nimport Hotkeys from '../../components/Hotkeys';\nimport ChallengeTitle from '../../components/challenge-title';\nimport CompletionModal from '../../components/completion-modal';\nimport HelpModal from '../../components/help-modal';\nimport Output from '../../components/output';\nimport TestSuite from '../../components/test-suite';\nimport {\n  challengeMounted,\n  executeChallenge,\n  initConsole,\n  initTests,\n  updateChallengeMeta,\n  updateSolutionFormValues\n} from '../../redux/actions';\nimport {\n  challengeTestsSelector,\n  consoleOutputSelector,\n  isChallengeCompletedSelector\n} from '../../redux/selectors';\nimport { getGuideUrl } from '../../utils';\nimport SolutionForm from '../solution-form';\nimport ProjectToolPanel from '../tool-panel';\n\nimport '../../components/test-frame.css';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  consoleOutputSelector,\n  challengeTestsSelector,\n  isChallengeCompletedSelector,\n  isSignedInSelector,\n  (\n    output: string[],\n    tests: Test[],\n    isChallengeCompleted: boolean,\n    isSignedIn: boolean\n  ) => ({\n    tests,\n    output,\n    isChallengeCompleted,\n    isSignedIn\n  })\n);\n\nconst mapDispatchToActions = {\n  challengeMounted,\n  executeChallenge,\n  initConsole,\n  initTests,\n  updateChallengeMeta,\n  updateSolutionFormValues\n};\n\n// Types\ninterface BackEndProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  description: string;\n  executeChallenge: (options: { showCompletionModal: boolean }) => void;\n  forumTopicId: number;\n  id: string;\n  initConsole: () => void;\n  initTests: (tests: Test[]) => void;\n  isChallengeCompleted: boolean;\n  isSignedIn: boolean;\n  output: string[];\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  tests: Test[];\n  title: string;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}\n\n// Component\nclass BackEnd extends Component<BackEndProps> {\n  static displayName: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _container: any;\n  constructor(props: BackEndProps) {\n    super(props);\n    this.state = {};\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.initializeComponent();\n    window.addEventListener('resize', () => this.updateDimensions());\n    this._container.focus();\n  }\n\n  updateDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', () => this.updateDimensions());\n  }\n\n  componentDidUpdate(prevProps: BackEndProps) {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            title: prevTitle,\n            fields: { tests: prevTests }\n          }\n        }\n      }\n    } = prevProps;\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            title: currentTitle,\n            fields: { tests: currTests }\n          }\n        }\n      }\n    } = this.props;\n    if (prevTitle !== currentTitle || prevTests !== currTests) {\n      this.initializeComponent();\n    }\n  }\n\n  initializeComponent() {\n    const {\n      challengeMounted,\n      initConsole,\n      initTests,\n      updateChallengeMeta,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            title,\n            challengeType,\n            helpCategory\n          }\n        }\n      },\n      pageContext: { challengeMeta }\n    } = this.props;\n    initConsole();\n    initTests(tests);\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n  }\n\n  handleSubmit({\n    showCompletionModal\n  }: {\n    showCompletionModal: boolean;\n  }): void {\n    this.props.executeChallenge({\n      showCompletionModal\n    });\n  }\n\n  render() {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { blockName },\n            challengeType,\n            forumTopicId,\n            title,\n            description,\n            instructions,\n            translationPending,\n            certification,\n            superBlock,\n            block\n          }\n        }\n      },\n      isChallengeCompleted,\n      output,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      t,\n      tests,\n      updateSolutionFormValues\n    } = this.props;\n\n    const blockNameTitle = `${t(\n      `intro:${superBlock}.blocks.${block}.title`\n    )} - ${title}`;\n\n    return (\n      <Hotkeys\n        innerRef={(c: HTMLElement | null) => (this._container = c)}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n      >\n        <LearnLayout>\n          <Helmet\n            title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n          />\n          <Grid>\n            <Row>\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <Spacer />\n                <ChallengeTitle\n                  isCompleted={isChallengeCompleted}\n                  translationPending={translationPending}\n                >\n                  {title}\n                </ChallengeTitle>\n                <ChallengeDescription\n                  description={description}\n                  instructions={instructions}\n                />\n                <SolutionForm\n                  challengeType={challengeType}\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  onSubmit={this.handleSubmit}\n                  updateSolutionForm={updateSolutionFormValues}\n                />\n                <ProjectToolPanel\n                  guideUrl={getGuideUrl({ forumTopicId, title })}\n                />\n                <br />\n                <Output\n                  defaultOutput={`/**\n*\n* ${t('learn.test-output')}\n*\n*\n*/`}\n                  output={output}\n                />\n                <TestSuite tests={tests} />\n                <Spacer />\n              </Col>\n              <CompletionModal\n                block={block}\n                blockName={blockName}\n                certification={certification}\n                superBlock={superBlock}\n              />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Grid>\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nBackEnd.displayName = 'BackEnd';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToActions\n)(withTranslation()(BackEnd));\n\nexport const query = graphql`\n  query BackendChallenge($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        forumTopicId\n        title\n        description\n        instructions\n        challengeType\n        helpCategory\n        certification\n        superBlock\n        block\n        translationPending\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["mapStateToProps","createSelector","consoleOutputSelector","challengeTestsSelector","isChallengeCompletedSelector","isSignedInSelector","output","tests","isChallengeCompleted","isSignedIn","mapDispatchToActions","challengeMounted","executeChallenge","initConsole","initTests","updateChallengeMeta","updateSolutionFormValues","BackEnd","props","state","updateDimensions","bind","handleSubmit","componentDidMount","this","initializeComponent","window","addEventListener","_container","focus","setState","width","innerWidth","height","innerHeight","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","data","challengeNode","challenge","prevTitle","title","prevTests","fields","currentTitle","currTests","challengeType","helpCategory","challengeMeta","pageContext","id","showCompletionModal","render","blockName","forumTopicId","description","instructions","translationPending","certification","superBlock","block","nextChallengePath","prevChallengePath","t","blockNameTitle","innerRef","c","md","mdOffset","sm","smOffset","xs","isCompleted","onSubmit","updateSolutionForm","guideUrl","getGuideUrl","defaultOutput","challengeTitle","challengeBlock","Component","displayName","connect","withTranslation"],"sourceRoot":""}