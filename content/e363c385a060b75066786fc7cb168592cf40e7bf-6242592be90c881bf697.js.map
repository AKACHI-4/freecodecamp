{"version":3,"file":"e363c385a060b75066786fc7cb168592cf40e7bf-6242592be90c881bf697.js","mappings":"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","sources":["webpack://@freecodecamp/client/../node_modules/bezier-easing/src/index.js","webpack://@freecodecamp/client/./src/assets/icons/green-pass.tsx","webpack://@freecodecamp/client/./src/components/create-redirect.ts","webpack://@freecodecamp/client/./src/components/layouts/learn.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/Hotkeys.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/challenge-title.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/completion-modal-body.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/completion-modal.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/prism-formatted.tsx"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX,\n    currentT,\n    i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\nfunction LinearEasing(x) {\n  return x;\n}\nmodule.exports = function bezier(mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n  return function BezierEasing(x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface GreenPassProps\n  extends JSX.IntrinsicAttributes,\n    React.SVGProps<SVGSVGElement> {\n  hushScreenReaderText?: boolean;\n}\nfunction GreenPass(props: GreenPassProps): JSX.Element {\n  const { t } = useTranslation();\n  const { hushScreenReaderText = false, ...rest } = props;\n  return (\n    <>\n      <svg\n        {...(hushScreenReaderText && { 'aria-hidden': true })}\n        {...(!hushScreenReaderText && { 'aria-label': t('icons.passed') })}\n        height='15'\n        viewBox='0 0 200 200'\n        width='15'\n        xmlns='http://www.w3.org/2000/svg'\n        {...rest}\n      >\n        <g aria-hidden='true'>\n          <title>{t('icons.passed')}</title>\n          <circle\n            cx='100'\n            cy='99'\n            fill='var(--primary-color)'\n            r='95'\n            stroke='var(--primary-color)'\n            strokeDasharray='null'\n          />\n          <rect\n            fill='var(--primary-background)'\n            height='30'\n            stroke='var(--primary-background)'\n            strokeDasharray='null'\n            transform='rotate(-45, 120, 106.321)'\n            width='128.85878'\n            x='55.57059'\n            y='91.32089'\n          />\n          <rect\n            fill='var(--primary-background)'\n            height='30'\n            stroke='var(--primary-background)'\n            strokeDasharray='null'\n            transform='rotate(45, 66.75, 123.75)'\n            width='80.66548'\n            x='26.41726'\n            y='108.75'\n          />\n        </g>\n      </svg>\n    </>\n  );\n}\n\nGreenPass.displayName = 'GreenPass';\n\nexport default GreenPass;\n","/* eslint-disable react/display-name */\nimport { navigate } from 'gatsby';\n\nconst createRedirect =\n  (to = '/'): (() => JSX.Element | null) =>\n  () => {\n    if (typeof window !== 'undefined') {\n      void navigate(to);\n    }\n    return null;\n  };\n\nexport default createRedirect;\n","import React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Loader } from '../../components/helpers';\nimport { tryToShowDonationModal } from '../../redux/actions';\nimport {\n  userFetchStateSelector,\n  isSignedInSelector,\n  userSelector\n} from '../../redux/selectors';\nimport DonateModal from '../Donation/donation-modal';\nimport createRedirect from '../create-redirect';\n\nimport './prism.css';\nimport './prism-night.css';\nimport 'react-reflex/styles.css';\nimport './learn.css';\n\ntype FetchState = {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n};\n\ntype User = {\n  acceptedPrivacyTerms: boolean;\n};\n\nconst mapStateToProps = createSelector(\n  userFetchStateSelector,\n  isSignedInSelector,\n  userSelector,\n  (fetchState: FetchState, isSignedIn, user: User) => ({\n    fetchState,\n    isSignedIn,\n    user\n  })\n);\n\nconst mapDispatchToProps = {\n  tryToShowDonationModal\n};\n\nconst RedirectEmailSignUp = createRedirect('/email-sign-up');\n\ntype LearnLayoutProps = {\n  isSignedIn?: boolean;\n  fetchState: FetchState;\n  user: User;\n  tryToShowDonationModal: () => void;\n  children?: React.ReactNode;\n};\n\nfunction LearnLayout({\n  isSignedIn,\n  fetchState,\n  user,\n  tryToShowDonationModal,\n  children\n}: LearnLayoutProps): JSX.Element {\n  useEffect(() => {\n    tryToShowDonationModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      const metaTag = document.querySelector(`meta[name=\"robots\"]`);\n      if (metaTag) {\n        metaTag.remove();\n      }\n    };\n  }, []);\n\n  if (fetchState.pending && !fetchState.complete) {\n    return <Loader fullScreen={true} />;\n  }\n\n  if (isSignedIn && !user.acceptedPrivacyTerms) {\n    return <RedirectEmailSignUp />;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <meta content='noindex' name='robots' />\n      </Helmet>\n      <main id='learn-app-wrapper'>{children}</main>\n      <DonateModal />\n    </>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LearnLayout);\n","import { navigate } from 'gatsby';\nimport React from 'react';\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { ChallengeFiles, Test, User } from '../../../redux/prop-types';\n\nimport { userSelector } from '../../../redux/selectors';\nimport {\n  setEditorFocusability,\n  submitChallenge,\n  openModal\n} from '../redux/actions';\nimport {\n  canFocusEditorSelector,\n  challengeFilesSelector,\n  challengeTestsSelector\n} from '../redux/selectors';\nimport './hotkeys.css';\nimport { isFinalProject } from '../../../../utils/challenge-types';\n\nconst mapStateToProps = createSelector(\n  canFocusEditorSelector,\n  challengeFilesSelector,\n  challengeTestsSelector,\n  userSelector,\n  (\n    canFocusEditor: boolean,\n    challengeFiles: ChallengeFiles,\n    tests: Test[],\n    user: User\n  ) => ({\n    canFocusEditor,\n    challengeFiles,\n    tests,\n    user\n  })\n);\n\nconst mapDispatchToProps = {\n  setEditorFocusability,\n  submitChallenge,\n  openShortcutsModal: () => openModal('shortcuts')\n};\n\nconst keyMap = {\n  navigationMode: 'escape',\n  executeChallenge: ['ctrl+enter', 'command+enter'],\n  focusEditor: 'e',\n  focusInstructionsPanel: 'r',\n  navigatePrev: ['p'],\n  navigateNext: ['n'],\n  showShortcuts: 'shift+/'\n};\n\ninterface HotkeysProps {\n  canFocusEditor: boolean;\n  challengeFiles: ChallengeFiles;\n  challengeType?: number;\n  children: React.ReactElement;\n  editorRef?: React.RefObject<HTMLElement>;\n  executeChallenge?: (options?: { showCompletionModal: boolean }) => void;\n  submitChallenge: () => void;\n  innerRef: React.Ref<HTMLElement>;\n  instructionsPanelRef?: React.RefObject<HTMLElement>;\n  nextChallengePath: string;\n  prevChallengePath: string;\n  setEditorFocusability: (arg0: boolean) => void;\n  tests: Test[];\n  usesMultifileEditor?: boolean;\n  openShortcutsModal: () => void;\n  user: User;\n}\n\nfunction Hotkeys({\n  canFocusEditor,\n  challengeType,\n  children,\n  instructionsPanelRef,\n  editorRef,\n  executeChallenge,\n  innerRef,\n  nextChallengePath,\n  prevChallengePath,\n  setEditorFocusability,\n  submitChallenge,\n  tests,\n  usesMultifileEditor,\n  openShortcutsModal,\n  user: { keyboardShortcuts }\n}: HotkeysProps): JSX.Element {\n  const handlers = {\n    executeChallenge: (e: React.KeyboardEvent<HTMLButtonElement>) => {\n      // the 'enter' part of 'ctrl+enter' stops HotKeys from listening, so it\n      // needs to be prevented.\n      // TODO: 'enter' on its own also disables HotKeys, but default behaviour\n      // should not be prevented in that case.\n      e.preventDefault();\n\n      if (!executeChallenge) return;\n\n      const testsArePassing = tests.every(test => test.pass && !test.err);\n\n      if (\n        usesMultifileEditor &&\n        typeof challengeType == 'number' &&\n        !isFinalProject(challengeType)\n      ) {\n        if (testsArePassing) {\n          submitChallenge();\n        } else {\n          executeChallenge();\n        }\n      } else {\n        executeChallenge({ showCompletionModal: true });\n      }\n    },\n    ...(keyboardShortcuts\n      ? {\n          focusEditor: (e: React.KeyboardEvent) => {\n            e.preventDefault();\n            if (editorRef && editorRef.current) {\n              editorRef.current.focus();\n            }\n          },\n          focusInstructionsPanel: () => {\n            if (instructionsPanelRef && instructionsPanelRef.current) {\n              instructionsPanelRef.current.focus();\n            }\n          },\n          navigationMode: () => setEditorFocusability(false),\n          navigatePrev: () => {\n            if (!canFocusEditor) void navigate(prevChallengePath);\n          },\n          navigateNext: () => {\n            if (!canFocusEditor) void navigate(nextChallengePath);\n          },\n          showShortcuts: (e: React.KeyboardEvent) => {\n            if (!canFocusEditor && e.shiftKey && e.key === '?') {\n              openShortcutsModal();\n            }\n          }\n        }\n      : {})\n  };\n  // GlobalHotKeys is always mounted and tracks all keypresses. Without it,\n  // keyup events can be missed and react-hotkeys assumes that that key is still\n  // being pressed.\n  // allowChanges is necessary if the handlers depend on props (in this case\n  // canFocusEditor)\n  return (\n    <>\n      {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}\n      {/* @ts-ignore */}\n      <HotKeys\n        allowChanges={true}\n        handlers={handlers}\n        innerRef={innerRef}\n        keyMap={keyMap}\n      >\n        {children}\n        <GlobalHotKeys />\n      </HotKeys>\n    </>\n  );\n}\n\nHotkeys.displayName = 'Hotkeys';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Hotkeys);\n","import i18next from 'i18next';\nimport React from 'react';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { Link } from '../../../components/helpers/index';\n\nimport './challenge-title.css';\n\ninterface ChallengeTitleProps {\n  children: string;\n  isCompleted: boolean;\n  translationPending: boolean;\n}\n\nfunction ChallengeTitle({\n  children,\n  isCompleted,\n  translationPending\n}: ChallengeTitleProps): JSX.Element {\n  return (\n    <div className='challenge-title-wrap'>\n      {translationPending && (\n        <>\n          <Link\n            className='title-translation-cta'\n            to={i18next.t('links:help-translate-link-url')}\n          >\n            {i18next.t('misc.translation-pending')}\n          </Link>\n        </>\n      )}\n      <div className='challenge-title'>\n        <div className='title-text'>\n          <h1>{children}</h1>\n          {isCompleted && <GreenPass />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nChallengeTitle.displayName = 'ChallengeTitle';\n\nexport default ChallengeTitle;\n","import BezierEasing from 'bezier-easing';\nimport React, { PureComponent } from 'react';\nimport { TFunction, withTranslation } from 'react-i18next';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { certMap } from '../../../resources/cert-and-project-map';\n\ninterface CompletionModalBodyProps {\n  block: string;\n  completedChallengesInBlock: number;\n  completedPercent: number;\n  currentChallengeId: string;\n  superBlock: string;\n  t: TFunction;\n  totalChallengesInBlock: number;\n}\n\ninterface CompletionModalBodyState {\n  // This type was driving me nuts - seems like `NodeJS.Timeout | null;` should work\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  progressInterval: number | null;\n  shownPercent: number;\n}\n\nexport class CompletionModalBody extends PureComponent<\n  CompletionModalBodyProps,\n  CompletionModalBodyState\n> {\n  static displayName: string;\n  constructor(props: CompletionModalBodyProps) {\n    super(props);\n\n    this.state = {\n      progressInterval: null,\n      shownPercent: 0\n    };\n\n    this.animateProgressBar = this.animateProgressBar.bind(this);\n  }\n\n  animateProgressBar(completedPercent: number): void {\n    const easing = BezierEasing(0.2, 0.5, 0.4, 1);\n\n    if (completedPercent > 100) completedPercent = 100;\n    if (completedPercent < 0) completedPercent = 0;\n\n    const transitionLength = completedPercent * 10 + 750;\n    const intervalLength = 10;\n    const intervalsToFinish = transitionLength / intervalLength;\n    const amountPerInterval = completedPercent / intervalsToFinish;\n    let percent = 0;\n\n    const myInterval = window.setInterval(() => {\n      percent += amountPerInterval;\n\n      if (percent > completedPercent) percent = completedPercent;\n\n      this.setState({\n        shownPercent: Math.round(\n          completedPercent * easing(percent / completedPercent)\n        )\n      });\n\n      if (percent >= completedPercent) clearInterval(myInterval);\n    }, intervalLength);\n\n    this.setState({\n      progressInterval: myInterval\n    });\n  }\n\n  componentWillUnmount(): void {\n    if (this.state.progressInterval !== null)\n      clearInterval(this.state.progressInterval);\n  }\n\n  render(): JSX.Element {\n    const {\n      block,\n      completedPercent,\n      totalChallengesInBlock,\n      completedChallengesInBlock,\n      currentChallengeId,\n      superBlock,\n      t\n    } = this.props;\n    const blockTitle = t(`intro:${superBlock}.blocks.${block}.title`);\n    const isCertificationProject = certMap.some(cert => {\n      // @ts-expect-error If `projects` does not exist, no consequences\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      return cert.projects?.some(\n        (project: { id: string }) => project.id === currentChallengeId\n      );\n    });\n    return (\n      <>\n        <div className='completion-challenge-details'>\n          <GreenPass\n            className='completion-success-icon'\n            data-testid='fcc-completion-success-icon'\n            onAnimationEnd={() => {\n              setTimeout(() => {\n                this.animateProgressBar(completedPercent);\n              }, 50);\n            }}\n          />\n        </div>\n        <div className='completion-block-details'>\n          <div className='completion-block-name'>{blockTitle}</div>\n          <div\n            className='progress-bar-wrap'\n            aria-label={t('learn.percent-complete', {\n              percent: completedPercent\n            })}\n          >\n            <div className='progress-bar-background' aria-hidden='true'>\n              {t('learn.percent-complete', {\n                percent: this.state.shownPercent\n              })}\n            </div>\n            <div\n              aria-hidden='true'\n              className='progress-bar-percent'\n              data-testid='fcc-progress-bar-percent'\n              style={{ width: `${this.state.shownPercent}%` }}\n            >\n              <div className='progress-bar-foreground'>\n                {t('learn.percent-complete', {\n                  percent: this.state.shownPercent\n                })}\n              </div>\n            </div>\n          </div>\n          {isCertificationProject && (\n            <output>\n              {t('learn.project-complete', {\n                completedChallengesInBlock,\n                totalChallengesInBlock\n              })}\n            </output>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nCompletionModalBody.displayName = 'CompletionModalBody';\n\nexport default withTranslation()(CompletionModalBody);\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport { Button, Modal } from '@freecodecamp/react-bootstrap';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { noop } from 'lodash-es';\nimport React, { Component } from 'react';\nimport { TFunction, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\nimport { dasherize } from '../../../../../utils/slugs';\nimport { isFinalProject } from '../../../../utils/challenge-types';\nimport Login from '../../../components/Header/components/Login';\nimport { executeGA, allowBlockDonationRequests } from '../../../redux/actions';\nimport { isSignedInSelector } from '../../../redux/selectors';\nimport { AllChallengeNode, ChallengeFiles } from '../../../redux/prop-types';\n\nimport { closeModal, submitChallenge } from '../redux/actions';\nimport {\n  completedChallengesIds,\n  isCompletionModalOpenSelector,\n  successMessageSelector,\n  challengeFilesSelector,\n  challengeMetaSelector\n} from '../redux/selectors';\nimport CompletionModalBody from './completion-modal-body';\n\nimport './completion-modal.css';\n\nconst mapStateToProps = createSelector(\n  challengeFilesSelector,\n  challengeMetaSelector,\n  completedChallengesIds,\n  isCompletionModalOpenSelector,\n  isSignedInSelector,\n  successMessageSelector,\n  (\n    challengeFiles: ChallengeFiles,\n    {\n      title,\n      id,\n      challengeType\n    }: { title: string; id: string; challengeType: number },\n    completedChallengesIds: string[],\n    isOpen: boolean,\n    isSignedIn: boolean,\n    message: string\n  ) => ({\n    challengeFiles,\n    title,\n    id,\n    challengeType,\n    completedChallengesIds,\n    isOpen,\n    isSignedIn,\n    message\n  })\n);\n\nconst mapDispatchToProps = function (dispatch: Dispatch) {\n  const dispatchers = {\n    close: () => dispatch(closeModal('completion')),\n    submitChallenge: () => {\n      dispatch(submitChallenge());\n    },\n    allowBlockDonationRequests: (block: string) => {\n      dispatch(allowBlockDonationRequests(block));\n    },\n    executeGA\n  };\n  return () => dispatchers;\n};\n\nexport function getCompletedPercent(\n  completedChallengesIds: string[] = [],\n  currentBlockIds: string[] = [],\n  currentChallengeId: string\n): number {\n  const completedChallengesInBlock = getCompletedChallengesInBlock(\n    completedChallengesIds,\n    currentBlockIds,\n    currentChallengeId\n  );\n  const completedPercent = Math.round(\n    (completedChallengesInBlock / currentBlockIds.length) * 100\n  );\n\n  return completedPercent > 100 ? 100 : completedPercent;\n}\n\nfunction getCompletedChallengesInBlock(\n  completedChallengesIds: string[],\n  currentBlockChallengeIds: string[],\n  currentChallengeId: string\n) {\n  const oldCompletionCount = completedChallengesIds.filter(challengeId =>\n    currentBlockChallengeIds.includes(challengeId)\n  ).length;\n\n  const isAlreadyCompleted =\n    completedChallengesIds.includes(currentChallengeId);\n\n  return isAlreadyCompleted ? oldCompletionCount : oldCompletionCount + 1;\n}\n\ninterface CompletionModalsProps {\n  allowBlockDonationRequests: (arg0: string) => void;\n  block: string;\n  blockName: string;\n  certification: string;\n  challengeType: number;\n  close: () => void;\n  completedChallengesIds: string[];\n  currentBlockIds?: string[];\n  executeGA: () => void;\n  challengeFiles: ChallengeFiles;\n  id: string;\n  isOpen: boolean;\n  isSignedIn: boolean;\n  message: string;\n  submitChallenge: () => void;\n  superBlock: string;\n  t: TFunction;\n  title: string;\n}\n\ninterface CompletionModalInnerState {\n  downloadURL: null | string;\n  completedPercent: number;\n  completedChallengesInBlock: number;\n}\n\nclass CompletionModalInner extends Component<\n  CompletionModalsProps,\n  CompletionModalInnerState\n> {\n  constructor(props: CompletionModalsProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeypress = this.handleKeypress.bind(this);\n\n    this.state = {\n      downloadURL: null,\n      completedPercent: 0,\n      completedChallengesInBlock: 0\n    };\n  }\n\n  static getDerivedStateFromProps(\n    props: CompletionModalsProps,\n    state: CompletionModalInnerState\n  ): CompletionModalInnerState {\n    const { challengeFiles, isOpen } = props;\n    if (!isOpen) {\n      return {\n        downloadURL: null,\n        completedPercent: 0,\n        completedChallengesInBlock: 0\n      };\n    }\n    const { downloadURL } = state;\n    if (downloadURL) {\n      URL.revokeObjectURL(downloadURL);\n    }\n    let newURL = null;\n    if (challengeFiles?.length) {\n      const filesForDownload = challengeFiles\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .reduce<string>((allFiles, currentFile: any) => {\n          const beforeText = `** start of ${currentFile.path} **\\n\\n`;\n          const afterText = `\\n\\n** end of ${currentFile.path} **\\n\\n`;\n          allFiles +=\n            challengeFiles.length > 1\n              ? `${beforeText}${currentFile.contents}${afterText}`\n              : currentFile.contents;\n          return allFiles;\n        }, '');\n      const blob = new Blob([filesForDownload], {\n        type: 'text/json'\n      });\n      newURL = URL.createObjectURL(blob);\n    }\n\n    const { completedChallengesIds, currentBlockIds, id, isSignedIn } = props;\n    const completedPercent = isSignedIn\n      ? getCompletedPercent(completedChallengesIds, currentBlockIds, id)\n      : 0;\n\n    let completedChallengesInBlock = 0;\n    if (currentBlockIds) {\n      completedChallengesInBlock = getCompletedChallengesInBlock(\n        completedChallengesIds,\n        currentBlockIds,\n        id\n      );\n    }\n\n    return {\n      downloadURL: newURL,\n      completedPercent,\n      completedChallengesInBlock\n    };\n  }\n\n  handleKeypress(e: React.KeyboardEvent): void {\n    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      // Since Hotkeys also listens to Ctrl + Enter we have to stop this event\n      // getting to it.\n      e.stopPropagation();\n      this.handleSubmit();\n    }\n  }\n\n  handleSubmit(): void {\n    this.props.submitChallenge();\n    this.checkBlockCompletion();\n  }\n\n  // check block completion for donation\n  checkBlockCompletion(): void {\n    if (\n      this.state.completedPercent === 100 &&\n      !this.props.completedChallengesIds.includes(this.props.id)\n    ) {\n      this.props.allowBlockDonationRequests(this.props.blockName);\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.state.downloadURL) {\n      URL.revokeObjectURL(this.state.downloadURL);\n    }\n    this.props.close();\n  }\n\n  render(): JSX.Element {\n    const {\n      block,\n      close,\n      currentBlockIds,\n      id,\n      isOpen,\n      isSignedIn,\n      message,\n      superBlock = '',\n      t,\n      title\n    } = this.props;\n\n    const { completedPercent, completedChallengesInBlock } = this.state;\n\n    const totalChallengesInBlock = currentBlockIds?.length ?? 0;\n\n    if (isOpen) {\n      executeGA({ event: 'pageview', pagePath: '/completion-modal' });\n    }\n    // normally dashedName should be graphQL queried and then passed around,\n    // but it's only used to make a nice filename for downloading, so dasherize\n    // is fine here.\n    const dashedName = dasherize(title);\n    return (\n      <Modal\n        animation={false}\n        bsSize='lg'\n        dialogClassName='challenge-success-modal'\n        keyboard={true}\n        onHide={close}\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        onKeyDown={isOpen ? this.handleKeypress : noop}\n        show={isOpen}\n      >\n        <Modal.Header\n          className='challenge-list-header fcc-modal'\n          closeButton={true}\n        >\n          <Modal.Title className='completion-message'>{message}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='completion-modal-body'>\n          <CompletionModalBody\n            {...{\n              block,\n              completedPercent,\n              completedChallengesInBlock,\n              currentChallengeId: id,\n              superBlock,\n              totalChallengesInBlock\n            }}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          {isSignedIn ? null : (\n            <Login block={true}>{t('learn.sign-in-save')}</Login>\n          )}\n          <Button\n            block={true}\n            bsSize='large'\n            bsStyle='primary'\n            onClick={() => this.handleSubmit()}\n          >\n            {isSignedIn ? t('buttons.submit-and-go') : t('buttons.go-to-next')}\n            <span className='hidden-xs'> (Ctrl + Enter)</span>\n          </Button>\n          {this.state.downloadURL ? (\n            <Button\n              block={true}\n              bsSize='lg'\n              bsStyle='primary'\n              className='btn-invert'\n              download={`${dashedName}.txt`}\n              href={this.state.downloadURL}\n            >\n              {t('learn.download-solution')}\n            </Button>\n          ) : null}\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\ninterface Options {\n  isFinalProjectBlock: boolean;\n}\n\ninterface CertificateNode {\n  challenge: {\n    // TODO: use enum\n    certification: string;\n    tests: { id: string }[];\n  };\n}\n\nconst useCurrentBlockIds = (\n  block: string,\n  certification: string,\n  options?: Options\n) => {\n  const {\n    allChallengeNode: { edges: challengeEdges },\n    allCertificateNode: { nodes: certificateNodes }\n  }: {\n    allChallengeNode: AllChallengeNode;\n    allCertificateNode: { nodes: CertificateNode[] };\n  } = useStaticQuery(graphql`\n    query getCurrentBlockNodes {\n      allChallengeNode(\n        sort: {\n          fields: [\n            challenge___superOrder\n            challenge___order\n            challenge___challengeOrder\n          ]\n        }\n      ) {\n        edges {\n          node {\n            challenge {\n              block\n              id\n            }\n          }\n        }\n      }\n      allCertificateNode {\n        nodes {\n          challenge {\n            certification\n            tests {\n              id\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const currentCertificateIds = certificateNodes\n    .filter(\n      node => dasherize(node.challenge.certification) === certification\n    )[0]\n    ?.challenge.tests.map(test => test.id);\n  const currentBlockIds = challengeEdges\n    .filter(edge => edge.node.challenge.block === block)\n    .map(edge => edge.node.challenge.id);\n\n  return options?.isFinalProjectBlock ? currentCertificateIds : currentBlockIds;\n};\n\nconst CompletionModal = (props: CompletionModalsProps) => {\n  const currentBlockIds = useCurrentBlockIds(\n    props.block || '',\n    props.certification || '',\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    { isFinalProjectBlock: isFinalProject(props.challengeType) }\n  );\n  return <CompletionModalInner currentBlockIds={currentBlockIds} {...props} />;\n};\n\nCompletionModal.displayName = 'CompletionModal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(CompletionModal));\n","import Prism from 'prismjs';\nimport React, { useRef, useEffect } from 'react';\nimport { enhancePrismAccessibility } from '../utils';\n\ninterface PrismFormattedProps {\n  className?: string;\n  text: string;\n}\n\nfunction PrismFormatted({ className, text }: PrismFormattedProps): JSX.Element {\n  const instructionsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Just in case 'current' has not been created, though it should have been.\n    if (instructionsRef.current) {\n      Prism.hooks.add('complete', enhancePrismAccessibility);\n      Prism.highlightAllUnder(instructionsRef.current);\n    }\n  }, []);\n\n  return (\n    <div\n      className={className}\n      dangerouslySetInnerHTML={{ __html: text }}\n      ref={instructionsRef}\n    />\n  );\n}\n\nPrismFormatted.displayName = 'PrismFormatted';\n\nexport default PrismFormatted;\n"],"names":["kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","LinearEasing","x","module","exports","mX1","mY1","mX2","mY2","Error","sampleValues","Array","i","getTForX","aX","intervalStart","currentSample","kSplineTableSize","guessForT","initialSlope","aGuessT","currentSlope","newtonRaphsonIterate","aA","aB","currentX","currentT","Math","abs","binarySubdivide","GreenPass","props","t","useTranslation","hushScreenReaderText","rest","height","viewBox","width","xmlns","cx","cy","fill","r","stroke","strokeDasharray","transform","y","displayName","to","window","navigate","mapStateToProps","createSelector","userFetchStateSelector","isSignedInSelector","userSelector","fetchState","isSignedIn","user","mapDispatchToProps","tryToShowDonationModal","RedirectEmailSignUp","createRedirect","connect","children","useEffect","metaTag","document","querySelector","remove","pending","complete","fullScreen","acceptedPrivacyTerms","content","name","id","canFocusEditorSelector","challengeFilesSelector","challengeTestsSelector","canFocusEditor","challengeFiles","tests","setEditorFocusability","submitChallenge","openShortcutsModal","openModal","keyMap","navigationMode","executeChallenge","focusEditor","focusInstructionsPanel","navigatePrev","navigateNext","showShortcuts","Hotkeys","challengeType","instructionsPanelRef","editorRef","innerRef","nextChallengePath","prevChallengePath","usesMultifileEditor","keyboardShortcuts","handlers","e","preventDefault","testsArePassing","every","test","pass","err","isFinalProject","showCompletionModal","current","focus","shiftKey","key","HotKeys","allowChanges","GlobalHotKeys","ChallengeTitle","isCompleted","translationPending","className","i18next","CompletionModalBody","state","progressInterval","shownPercent","animateProgressBar","bind","completedPercent","easing","BezierEasing","amountPerInterval","percent","myInterval","setInterval","setState","round","clearInterval","this","componentWillUnmount","render","block","totalChallengesInBlock","completedChallengesInBlock","currentChallengeId","superBlock","blockTitle","isCertificationProject","certMap","cert","projects","some","project","onAnimationEnd","setTimeout","style","PureComponent","withTranslation","challengeMetaSelector","completedChallengesIds","isCompletionModalOpenSelector","successMessageSelector","isOpen","message","title","getCompletedChallengesInBlock","currentBlockChallengeIds","oldCompletionCount","filter","challengeId","includes","length","CompletionModalInner","handleSubmit","handleKeypress","downloadURL","getDerivedStateFromProps","URL","revokeObjectURL","newURL","filesForDownload","reduce","allFiles","currentFile","beforeText","path","afterText","contents","blob","Blob","type","createObjectURL","currentBlockIds","getCompletedPercent","ctrlKey","metaKey","stopPropagation","checkBlockCompletion","allowBlockDonationRequests","blockName","close","executeGA","event","pagePath","dashedName","dasherize","animation","bsSize","dialogClassName","keyboard","onHide","onKeyDown","show","closeButton","Login","bsStyle","onClick","download","href","Component","CompletionModal","certification","options","useStaticQuery","challengeEdges","allChallengeNode","edges","currentCertificateIds","allCertificateNode","nodes","node","challenge","map","edge","isFinalProjectBlock","useCurrentBlockIds","dispatch","dispatchers","closeModal","PrismFormatted","text","instructionsRef","useRef","Prism","enhancePrismAccessibility","dangerouslySetInnerHTML","__html","ref"],"sourceRoot":""}