{"version":3,"file":"component---src-templates-challenges-codeally-show-tsx-d3f92ee2e5e60704a5e7.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/templates/Challenges/codeally/show.tsx"],"sourcesContent":["// Package Utilities\nimport { Alert, Grid, Col, Row, Button } from '@freecodecamp/react-bootstrap';\nimport { graphql } from 'gatsby';\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport { TFunction, Trans, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\n// Local Utilities\nimport Spacer from '../../../components/helpers/spacer';\nimport LearnLayout from '../../../components/layouts/learn';\nimport ChallengeTitle from '../components/challenge-title';\nimport PrismFormatted from '../components/prism-formatted';\nimport { challengeTypes } from '../../../../utils/challenge-types';\nimport CompletionModal from '../components/completion-modal';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport HelpModal from '../components/help-modal';\nimport Hotkeys from '../components/Hotkeys';\nimport { hideCodeAlly, tryToShowCodeAlly } from '../../../redux/actions';\nimport {\n  completedChallengesSelector,\n  partiallyCompletedChallengesSelector,\n  showCodeAllySelector,\n  isSignedInSelector,\n  userTokenSelector\n} from '../../../redux/selectors';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport {\n  ChallengeNode,\n  ChallengeMeta,\n  CompletedChallenge\n} from '../../../redux/prop-types';\nimport ProjectToolPanel from '../projects/tool-panel';\nimport SolutionForm from '../projects/solution-form';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\n\nimport './codeally.css';\n\n// Redux\nconst mapStateToProps = createSelector(\n  completedChallengesSelector,\n  isChallengeCompletedSelector,\n  isSignedInSelector,\n  partiallyCompletedChallengesSelector,\n  showCodeAllySelector,\n  userTokenSelector,\n  (\n    completedChallenges: CompletedChallenge[],\n    isChallengeCompleted: boolean,\n    isSignedIn: boolean,\n    partiallyCompletedChallenges: CompletedChallenge[],\n    showCodeAlly: boolean,\n    userToken: string | null\n  ) => ({\n    completedChallenges,\n    isChallengeCompleted,\n    isSignedIn,\n    partiallyCompletedChallenges,\n    showCodeAlly,\n    userToken\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      challengeMounted,\n      createFlashMessage,\n      hideCodeAlly,\n      openCompletionModal: () => openModal('completion'),\n      tryToShowCodeAlly,\n      updateChallengeMeta,\n      updateSolutionFormValues\n    },\n    dispatch\n  );\n\n// Types\ninterface ShowCodeAllyProps {\n  challengeMounted: (arg0: string) => void;\n  completedChallenges: CompletedChallenge[];\n  createFlashMessage: typeof createFlashMessage;\n  data: { challengeNode: ChallengeNode };\n  hideCodeAlly: () => void;\n  isChallengeCompleted: boolean;\n  isSignedIn: boolean;\n  openCompletionModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  partiallyCompletedChallenges: CompletedChallenge[];\n  showCodeAlly: boolean;\n  t: TFunction;\n  tryToShowCodeAlly: () => void;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n  userToken: string | null;\n}\n\n// Component\nclass ShowCodeAlly extends Component<ShowCodeAllyProps> {\n  static displayName: string;\n  private _container: HTMLElement | null = null;\n\n  componentDidMount(): void {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { challengeType, helpCategory, title }\n        }\n      },\n      pageContext: { challengeMeta },\n      updateChallengeMeta\n    } = this.props;\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n    this._container?.focus();\n  }\n\n  componentWillUnmount() {\n    this.props.hideCodeAlly();\n  }\n\n  handleSubmit = ({\n    showCompletionModal\n  }: {\n    showCompletionModal: boolean;\n  }) => {\n    const {\n      completedChallenges,\n      createFlashMessage,\n      data: {\n        challengeNode: {\n          challenge: { id: challengeId }\n        }\n      },\n      openCompletionModal,\n      partiallyCompletedChallenges\n    } = this.props;\n\n    const isPartiallyCompleted = partiallyCompletedChallenges.some(\n      challenge => challenge.id === challengeId\n    );\n\n    const isCompleted = completedChallenges.some(\n      challenge => challenge.id === challengeId\n    );\n\n    if (!isPartiallyCompleted && !isCompleted) {\n      createFlashMessage({\n        type: 'danger',\n        message: FlashMessages.CompleteProjectFirst\n      });\n    } else if (showCompletionModal) {\n      openCompletionModal();\n    }\n  };\n\n  render() {\n    const {\n      completedChallenges,\n      data: {\n        challengeNode: {\n          challenge: {\n            block,\n            certification,\n            challengeType,\n            description,\n            fields: { blockName },\n            id: challengeId,\n            instructions,\n            notes,\n            superBlock,\n            title,\n            translationPending,\n            url\n          }\n        }\n      },\n      isChallengeCompleted,\n      isSignedIn,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      partiallyCompletedChallenges,\n      showCodeAlly,\n      t,\n      tryToShowCodeAlly,\n      updateSolutionFormValues,\n      userToken = null\n    } = this.props;\n\n    // Initial CodeAlly login includes a tempToken in redirect URL\n    const queryParams = new URLSearchParams(window.location.search);\n    const codeAllyTempToken: string | null = queryParams.get('tempToken');\n\n    const tempToken = codeAllyTempToken ? `tempToken=${codeAllyTempToken}` : '';\n\n    // Include a unique param to avoid CodeAlly caching issues\n    const date = `date=${Date.now()}`;\n\n    // User token for submitting CodeRoad tutorials\n    const envVariables = userToken\n      ? `envVariables=CODEROAD_WEBHOOK_TOKEN=${userToken}`\n      : '';\n\n    const goBackTo = `goBackTo=${window.location.href}`;\n\n    const isPartiallyCompleted = partiallyCompletedChallenges.some(\n      challenge => challenge.id === challengeId\n    );\n\n    const isCompleted = completedChallenges.some(\n      challenge => challenge.id === challengeId\n    );\n\n    const breadcrumbs = document.querySelector('.breadcrumbs-demo');\n    showCodeAlly && breadcrumbs?.remove();\n\n    return showCodeAlly ? (\n      <LearnLayout>\n        <Helmet title={`${blockName}: ${title} | freeCodeCamp.org`} />\n        <iframe\n          className='codeally-frame'\n          data-cy='codeally-frame'\n          name={`codeAlly${Date.now()}`}\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          sandbox='allow-modals allow-forms allow-popups allow-scripts allow-same-origin'\n          src={`https://codeally.io/embed/?repoUrl=${url}&${goBackTo}&${envVariables}&${tempToken}&${date}`}\n          title='Editor'\n        />\n      </LearnLayout>\n    ) : (\n      <Hotkeys\n        innerRef={(c: HTMLElement | null) => (this._container = c)}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n      >\n        <LearnLayout>\n          <Helmet title={`${blockName}: ${title} | freeCodeCamp.org`} />\n          <Grid>\n            <Row>\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <Spacer />\n                <ChallengeTitle\n                  isCompleted={isChallengeCompleted}\n                  translationPending={translationPending}\n                >\n                  {title}\n                </ChallengeTitle>\n                <Spacer />\n                <PrismFormatted text={description} />\n                <Spacer />\n                <div className='ca-description'>\n                  <Trans i18nKey='learn.github-required'>\n                    <a\n                      href='https://github.com/join'\n                      rel='noopener noreferrer'\n                      target='_blank'\n                      title={t('learn.github-link')}\n                    >\n                      placeholder\n                    </a>\n                  </Trans>\n                </div>\n                <Spacer />\n                {isSignedIn &&\n                  challengeType === challengeTypes.codeAllyCert && (\n                    <>\n                      <div className='ca-description'>\n                        {t('learn.complete-both-steps')}\n                      </div>\n                      <hr />\n                      <Spacer />\n                      <b>{t('learn.step-1')}</b>\n                      {(isPartiallyCompleted || isCompleted) && (\n                        <GreenPass\n                          style={{\n                            height: '15px',\n                            width: '15px',\n                            marginInlineEnd: '7px'\n                          }}\n                        />\n                      )}\n                      <Spacer />\n                      <div className='ca-description'>\n                        {t('learn.runs-in-vm')}\n                      </div>\n                      <Spacer />\n                      <PrismFormatted text={instructions} />\n                      <Spacer />\n                    </>\n                  )}\n                <div\n                  className={`ca-btn-padding ${\n                    !isSignedIn ||\n                    challengeType === challengeTypes.codeAllyPractice\n                      ? 'ca-btn-margin'\n                      : ''\n                  }`}\n                >\n                  <Alert id='codeally-cookie-warning' bsStyle='info'>\n                    <p>{t(`intro:misc-text.enable-cookies`)}</p>\n                  </Alert>\n                  <Button\n                    aria-describedby='codeally-cookie-warning'\n                    block={true}\n                    bsStyle='primary'\n                    data-cy='start-codeally'\n                    onClick={tryToShowCodeAlly}\n                  >\n                    {challengeType === challengeTypes.codeAllyCert\n                      ? t('buttons.click-start-project')\n                      : t('buttons.click-start-course')}\n                  </Button>\n                </div>\n                {isSignedIn &&\n                  challengeType === challengeTypes.codeAllyCert && (\n                    <>\n                      <hr />\n                      <Spacer />\n                      <b>{t('learn.step-2')}</b>\n                      {isCompleted && (\n                        <GreenPass\n                          style={{\n                            height: '15px',\n                            width: '15px',\n                            marginInlineStart: '7px'\n                          }}\n                        />\n                      )}\n                      <Spacer />\n                      <div className='ca-description'>\n                        {t('learn.submit-public-url')}\n                      </div>\n                      <Spacer />\n                      <PrismFormatted text={notes} />\n                      <Spacer />\n                      <SolutionForm\n                        challengeType={challengeType}\n                        description={description}\n                        onSubmit={this.handleSubmit}\n                        updateSolutionForm={updateSolutionFormValues}\n                      />\n                    </>\n                  )}\n                <ProjectToolPanel />\n                <br />\n                <Spacer />\n              </Col>\n              <CompletionModal\n                block={block}\n                blockName={blockName}\n                certification={certification}\n                superBlock={superBlock}\n              />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Grid>\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nShowCodeAlly.displayName = 'ShowCodeAlly';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShowCodeAlly));\n\n// GraphQL\nexport const query = graphql`\n  query CodeAllyChallenge($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        block\n        certification\n        challengeType\n        description\n        fields {\n          blockName\n        }\n        helpCategory\n        id\n        instructions\n        notes\n        superBlock\n        title\n        translationPending\n        url\n      }\n    }\n  }\n`;\n"],"names":["mapStateToProps","createSelector","completedChallengesSelector","isChallengeCompletedSelector","isSignedInSelector","partiallyCompletedChallengesSelector","showCodeAllySelector","userTokenSelector","completedChallenges","isChallengeCompleted","isSignedIn","partiallyCompletedChallenges","showCodeAlly","userToken","ShowCodeAlly","_container","handleSubmit","showCompletionModal","props","createFlashMessage","challengeId","data","challengeNode","challenge","id","openCompletionModal","isPartiallyCompleted","some","isCompleted","type","message","FlashMessages","componentDidMount","this","challengeMounted","challengeType","helpCategory","title","challengeMeta","pageContext","updateChallengeMeta","focus","componentWillUnmount","hideCodeAlly","render","block","certification","description","blockName","fields","instructions","notes","superBlock","translationPending","url","nextChallengePath","prevChallengePath","t","tryToShowCodeAlly","updateSolutionFormValues","codeAllyTempToken","URLSearchParams","window","location","search","get","tempToken","date","Date","now","envVariables","goBackTo","href","breadcrumbs","document","querySelector","remove","className","name","sandbox","src","innerRef","c","md","mdOffset","sm","smOffset","xs","text","i18nKey","rel","target","challengeTypes","style","height","width","marginInlineEnd","bsStyle","onClick","marginInlineStart","onSubmit","updateSolutionForm","challengeTitle","challengeBlock","Component","displayName","connect","dispatch","bindActionCreators","openModal","withTranslation"],"sourceRoot":""}